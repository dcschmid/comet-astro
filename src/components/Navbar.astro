---
/**
 * Navbar - responsive top navigation with toggle
 */
interface NavItem {
  href: string;
  label: string;
  external?: boolean;
}

interface Props {
  items?: NavItem[];
  brand?: string;
  className?: string;
}

const { items = [], brand = 'Comet', className = '' } = Astro.props as Props;
const navId = `comet-nav-${Math.random().toString(36).slice(2, 9)}`;
---

<header
  class={`w-full border-b border-slate-200 bg-white/95 text-slate-900 backdrop-blur supports-[backdrop-filter]:bg-white/85 dark:border-slate-800 dark:bg-slate-950/85 dark:text-slate-100 ${className}`.trim()}
>
  <div
    class="mx-auto flex max-w-7xl items-center justify-between gap-4 px-4 py-3 sm:px-6"
  >
    <a
      href="/"
      class="text-lg font-semibold text-slate-900 no-underline transition hover:text-blue-700 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-600 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:text-slate-100 dark:hover:text-blue-200 dark:focus-visible:ring-offset-slate-900"
    >
      {brand}
    </a>
    <button
      type="button"
      class="inline-flex min-h-[44px] min-w-[44px] items-center justify-center gap-2 rounded-lg border border-slate-300 bg-white px-3 text-sm font-semibold text-slate-900 shadow-sm transition hover:bg-slate-100 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-600 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:border-slate-600 dark:bg-slate-900 dark:text-slate-100 dark:hover:bg-slate-800 dark:focus-visible:ring-offset-slate-900 md:hidden"
      data-nav-toggle
      aria-controls={navId}
      aria-expanded="false"
    >
      Menu
      <span class="text-base" aria-hidden="true">â˜°</span>
    </button>
    <nav
      id={navId}
      class="hidden w-full max-w-3xl md:block md:w-auto"
      data-nav
      role="navigation"
    >
      <ul
        class="mt-3 flex flex-col gap-2 md:mt-0 md:flex-row md:items-center md:gap-4"
      >
        {
          items.map((i) => (
            <li>
              <a
                href={i.href}
                target={i.external ? '_blank' : undefined}
                rel={i.external ? 'noopener noreferrer' : undefined}
                class="inline-flex min-h-[44px] items-center rounded-lg px-3 py-2 text-sm font-medium text-slate-700 no-underline transition hover:bg-slate-100 hover:text-blue-700 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-600 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:text-slate-200 dark:hover:bg-slate-800 dark:hover:text-blue-200 dark:focus-visible:ring-offset-slate-900"
              >
                {i.label}
                {i.external && (
                  <span class="sr-only"> (opens in new window)</span>
                )}
              </a>
            </li>
          ))
        }
        <slot name="actions" />
      </ul>
    </nav>
  </div>
</header>

<script is:inline>
  (function () {
    const root = document.currentScript?.previousElementSibling;
    if (!(root instanceof HTMLElement)) return;
    const toggle = root.querySelector('[data-nav-toggle]');
    const nav = root.querySelector('[data-nav]');
    if (!(toggle instanceof HTMLElement) || !(nav instanceof HTMLElement))
      return;

    const updateVisibility = (nextOpen) => {
      toggle.setAttribute('aria-expanded', String(nextOpen));
      if (window.innerWidth >= 768) {
        nav.classList.remove('hidden');
        return;
      }
      nav.classList.toggle('hidden', !nextOpen);
    };

    toggle.addEventListener('click', (event) => {
      event.preventDefault();
      const isOpen = toggle.getAttribute('aria-expanded') === 'true';
      updateVisibility(!isOpen);
    });

    nav.addEventListener('keydown', (event) => {
      if (event.key === 'Escape') {
        updateVisibility(false);
        toggle.focus({ preventScroll: true });
      }
    });

    nav.addEventListener('click', (event) => {
      const link =
        event.target instanceof HTMLElement
          ? event.target.closest('a[href]')
          : null;
      if (!(link instanceof HTMLElement)) return;
      if (window.innerWidth < 768) {
        updateVisibility(false);
      }
    });

    window.addEventListener('resize', () => {
      const isDesktop = window.innerWidth >= 768;
      const isOpen = toggle.getAttribute('aria-expanded') === 'true';
      if (isDesktop) {
        nav.classList.remove('hidden');
        toggle.setAttribute('aria-expanded', 'false');
      } else {
        nav.classList.toggle('hidden', !isOpen);
      }
    });

    updateVisibility(false);
  })();
</script>
