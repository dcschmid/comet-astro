---
interface MenuItem {
  label: string;
  href?: string;
  icon?: string;
  onClick?: string;
  divider?: boolean;
  disabled?: boolean;
}

interface Props {
  items: MenuItem[];
  align?: 'left' | 'right';
  className?: string;
}

const { items, align = 'left', className = '' } = Astro.props;

const alignClass = align === 'right' ? 'right-0' : 'left-0';
---

<div
  class={`relative inline-block text-slate-900 dark:text-slate-100 ${className}`}
  data-dropdown
>
  <button
    type="button"
    class="inline-flex items-center gap-2 rounded-lg border border-slate-300 bg-white px-4 py-2 text-sm font-semibold text-slate-900 shadow-sm transition hover:bg-slate-100 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:border-slate-600 dark:bg-slate-900 dark:text-slate-100 dark:hover:bg-slate-800 dark:focus-visible:ring-offset-slate-900"
    data-dropdown-trigger
    aria-haspopup="menu"
    aria-expanded="false"
  >
    <slot name="trigger"> Menu â–¼ </slot>
  </button>

  <div
    class={`absolute ${alignClass} z-50 mt-2 w-60 rounded-xl border border-slate-200 bg-white py-1 shadow-xl ring-1 ring-black/5 opacity-0 invisible transition duration-150 ease-out dark:border-slate-700 dark:bg-slate-900`}
    data-dropdown-menu
    role="menu"
  >
    <div class="py-1">
      {
        items.map((item) =>
          item.divider ? (
            <hr class="my-1 border-slate-200 dark:border-slate-700" />
          ) : item.href ? (
            <a
              href={item.disabled ? undefined : item.href}
              class={`flex items-center gap-3 px-4 py-2 text-sm font-medium transition ${
                item.disabled
                  ? 'cursor-not-allowed text-slate-400 dark:text-slate-600'
                  : 'text-slate-700 hover:bg-blue-50 hover:text-blue-700 dark:text-slate-200 dark:hover:bg-blue-500/20'
              }`}
              role="menuitem"
              tabIndex={-1}
              aria-disabled={item.disabled}
              data-dropdown-item
            >
              {item.icon && <span class="text-lg">{item.icon}</span>}
              {item.label}
            </a>
          ) : (
            <button
              type="button"
              onclick={item.onClick}
              class={`flex w-full items-center gap-3 px-4 py-2 text-sm font-medium transition ${
                item.disabled
                  ? 'cursor-not-allowed text-slate-400 dark:text-slate-600'
                  : 'text-slate-700 hover:bg-blue-50 hover:text-blue-700 dark:text-slate-200 dark:hover:bg-blue-500/20'
              }`}
              role="menuitem"
              tabIndex={-1}
              disabled={item.disabled}
              data-dropdown-item
            >
              {item.icon && <span class="text-lg">{item.icon}</span>}
              {item.label}
            </button>
          )
        )
      }
    </div>
  </div>
</div>

<script is:inline>
  (function () {
    const dropdowns = Array.from(
      document.querySelectorAll('[data-dropdown]')
    ).filter((el) => el instanceof HTMLElement);
    if (!dropdowns.length) return;

    const closeAll = () => {
      dropdowns.forEach((dropdown) => {
        const trigger = dropdown.querySelector('[data-dropdown-trigger]');
        const menu = dropdown.querySelector('[data-dropdown-menu]');
        if (menu instanceof HTMLElement) {
          menu.classList.add('invisible');
          menu.classList.add('opacity-0');
        }
        if (trigger instanceof HTMLElement) {
          trigger.setAttribute('aria-expanded', 'false');
        }
      });
    };

    const openMenu = (dropdown) => {
      const trigger = dropdown.querySelector('[data-dropdown-trigger]');
      const menu = dropdown.querySelector('[data-dropdown-menu]');
      if (!(trigger instanceof HTMLElement) || !(menu instanceof HTMLElement))
        return;
      closeAll();
      menu.classList.remove('invisible');
      requestAnimationFrame(() => {
        menu.classList.remove('opacity-0');
      });
      trigger.setAttribute('aria-expanded', 'true');
      const items = Array.from(
        menu.querySelectorAll('[data-dropdown-item]')
      ).filter(
        (el) =>
          el instanceof HTMLElement &&
          !el.hasAttribute('disabled') &&
          el.getAttribute('aria-disabled') !== 'true'
      );
      (items[0] || menu).focus({ preventScroll: true });
    };

    dropdowns.forEach((dropdown) => {
      const trigger = dropdown.querySelector('[data-dropdown-trigger]');
      const menu = dropdown.querySelector('[data-dropdown-menu]');
      if (!(trigger instanceof HTMLElement) || !(menu instanceof HTMLElement))
        return;

      trigger.addEventListener('click', (event) => {
        event.stopPropagation();
        const isOpen = !menu.classList.contains('invisible');
        if (isOpen) {
          closeAll();
        } else {
          openMenu(dropdown);
        }
      });

      trigger.addEventListener('keydown', (event) => {
        if (
          event.key === 'ArrowDown' ||
          event.key === 'Enter' ||
          event.key === ' '
        ) {
          event.preventDefault();
          openMenu(dropdown);
        }
      });

      menu.addEventListener('click', (event) => {
        const item =
          event.target instanceof HTMLElement
            ? event.target.closest('[data-dropdown-item]')
            : null;
        if (
          !item ||
          item.getAttribute('aria-disabled') === 'true' ||
          item.hasAttribute('disabled')
        )
          return;
        closeAll();
        trigger.focus({ preventScroll: true });
      });

      menu.addEventListener('keydown', (event) => {
        const items = Array.from(
          menu.querySelectorAll('[data-dropdown-item]')
        ).filter(
          (el) =>
            el instanceof HTMLElement &&
            !el.hasAttribute('disabled') &&
            el.getAttribute('aria-disabled') !== 'true'
        );
        if (!items.length) return;
        const currentIndex = items.findIndex(
          (el) => el === document.activeElement
        );
        if (event.key === 'ArrowDown') {
          event.preventDefault();
          const next = items[(currentIndex + 1) % items.length];
          next.focus({ preventScroll: true });
        } else if (event.key === 'ArrowUp') {
          event.preventDefault();
          const prev = items[(currentIndex - 1 + items.length) % items.length];
          prev.focus({ preventScroll: true });
        } else if (event.key === 'Home') {
          event.preventDefault();
          items[0].focus({ preventScroll: true });
        } else if (event.key === 'End') {
          event.preventDefault();
          items[items.length - 1].focus({ preventScroll: true });
        } else if (event.key === 'Escape') {
          event.preventDefault();
          closeAll();
          trigger.focus({ preventScroll: true });
        } else if (event.key === 'Tab') {
          closeAll();
        } else if (event.key === 'Enter' || event.key === ' ') {
          if (document.activeElement instanceof HTMLElement) {
            document.activeElement.click();
          }
        }
      });
    });

    document.addEventListener('click', () => {
      closeAll();
    });
  })();
</script>
