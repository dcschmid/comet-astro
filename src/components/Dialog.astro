---
interface Props {
  id: string;
  title?: string;
  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full';
  dismissible?: boolean;
  className?: string;
}

const {
  id,
  title,
  size = 'md',
  dismissible = true,
  className = '',
} = Astro.props;

const sizeClasses = {
  sm: 'max-w-sm',
  md: 'max-w-md',
  lg: 'max-w-lg',
  xl: 'max-w-xl',
  full: 'max-w-full',
};
---

<dialog
  id={id}
  class={`${sizeClasses[size]} w-full rounded-2xl border border-slate-200 bg-white p-0 text-slate-900 backdrop:bg-slate-950/60 ${className} dark:border-slate-700 dark:bg-slate-900 dark:text-slate-100`}
  data-dialog
  aria-modal="true"
  role="dialog"
  aria-labelledby={title ? `${id}-title` : undefined}
>
  <div class="relative">
    {
      dismissible && (
        <button
          type="button"
          class="absolute right-4 top-4 inline-flex h-9 w-9 items-center justify-center rounded-full border border-transparent text-slate-500 transition hover:text-blue-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:text-slate-300 dark:hover:text-blue-300 dark:focus-visible:ring-offset-slate-900"
          data-dialog-close
          aria-label="Close"
        >
          âœ•
        </button>
      )
    }
    {
      title && (
        <header class="border-b border-slate-200 px-6 py-4 dark:border-slate-800">
          <h2
            id={`${id}-title`}
            class="text-xl font-semibold text-slate-900 dark:text-slate-100"
          >
            {title}
          </h2>
        </header>
      )
    }
    <div
      class="px-6 py-5 text-sm leading-relaxed text-slate-700 dark:text-slate-200"
    >
      <slot />
    </div>
    <footer
      class="flex justify-end gap-3 border-t border-slate-200 px-6 py-4 dark:border-slate-800"
    >
      <slot name="actions">
        {
          dismissible && (
            <button
              type="button"
              class="rounded-lg border border-slate-300 bg-slate-100 px-4 py-2 text-sm font-semibold text-slate-700 transition hover:bg-slate-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:border-slate-600 dark:bg-slate-800 dark:text-slate-100 dark:hover:bg-slate-700 dark:focus-visible:ring-offset-slate-900"
              data-dialog-close
            >
              Close
            </button>
          )
        }
      </slot>
    </footer>
  </div>
</dialog>

<script is:inline>
  (function () {
    const dialogs = Array.from(
      document.querySelectorAll('[data-dialog]')
    ).filter((el) => el instanceof HTMLDialogElement);
    if (!dialogs.length) return;

    const closeDialog = (dialog) => {
      try {
        dialog.close();
      } catch {
        dialog.removeAttribute('open');
      }
    };

    dialogs.forEach((dialog) => {
      dialog.addEventListener('cancel', (event) => {
        event.preventDefault();
        closeDialog(dialog);
      });

      dialog.addEventListener('click', (event) => {
        if (event.target === dialog) {
          closeDialog(dialog);
        }
      });

      dialog.querySelectorAll('[data-dialog-close]').forEach((button) => {
        button.addEventListener('click', () => closeDialog(dialog));
      });
    });

    document.addEventListener('click', (event) => {
      const trigger =
        event.target instanceof HTMLElement
          ? event.target.closest('[data-dialog-trigger]')
          : null;
      if (!trigger) return;
      const targetId = trigger.getAttribute('data-dialog-trigger');
      if (!targetId) return;
      const dialog = document.getElementById(targetId);
      if (!(dialog instanceof HTMLDialogElement)) return;
      try {
        dialog.showModal();
      } catch {
        dialog.setAttribute('open', 'true');
      }
    });
  })();
</script>
