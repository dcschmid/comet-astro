---
/**
 * Carousel - image/content carousel with controls and autoplay support
 */
interface Slide {
  id?: string;
  image?: string;
  alt?: string;
  title?: string;
  description?: string;
}

interface Props {
  slides: Slide[];
  autoplay?: boolean;
  interval?: number;
  loop?: boolean;
  showIndicators?: boolean;
  showControls?: boolean;
  className?: string;
}

const {
  slides = [],
  autoplay = false,
  interval = 5000,
  loop = true,
  showIndicators = true,
  showControls = true,
  className = '',
} = Astro.props as Props;

const id = `carousel-${Math.random().toString(36).slice(2, 10)}`;
---

{
  slides.length === 0 ? (
    <div
      class={`rounded-xl border border-slate-200 bg-white p-6 text-center text-slate-600 shadow-sm dark:border-slate-700 dark:bg-slate-900 dark:text-slate-300 ${className}`}
    >
      No slides configured.
    </div>
  ) : (
    <div
      id={id}
      class={`relative overflow-hidden rounded-xl border border-slate-200 bg-white text-slate-900 shadow-sm dark:border-slate-800 dark:bg-slate-950 dark:text-slate-50 ${className}`}
      data-carousel-root
      data-slide-count={slides.length}
      data-autoplay={autoplay}
      data-interval={interval}
      data-loop={loop}
      aria-roledescription="carousel"
      aria-live="polite"
    >
      <div class="relative">
        <div
          class="flex transition-transform duration-500 ease-out motion-reduce:transition-none"
          data-carousel-track
        >
          {slides.map((slide, index) => (
            <div
              class="min-w-full flex-shrink-0"
              role="group"
              aria-roledescription="slide"
              aria-label={`Slide ${index + 1} of ${slides.length}`}
              id={`${id}-slide-${index}`}
            >
              <div class="relative h-full">
                {slide.image ? (
                  <img
                    src={slide.image}
                    alt={slide.alt || slide.title || `Slide ${index + 1}`}
                    class="h-72 w-full object-cover md:h-96"
                    loading={index === 0 ? 'eager' : 'lazy'}
                  />
                ) : (
                  <div class="flex h-72 items-center justify-center bg-slate-100 text-slate-500 dark:bg-slate-900 md:h-96">
                    No image provided
                  </div>
                )}
                {(slide.title || slide.description) && (
                  <div class="absolute inset-x-0 bottom-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent p-6 text-white">
                    {slide.title && (
                      <h3 class="text-xl font-semibold">{slide.title}</h3>
                    )}
                    {slide.description && (
                      <p class="mt-2 text-sm text-white/85">
                        {slide.description}
                      </p>
                    )}
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>

        {showControls && (
          <>
            <button
              type="button"
              class="absolute left-4 top-1/2 flex -translate-y-1/2 items-center justify-center rounded-full border border-slate-200 bg-white/90 p-3 text-slate-900 shadow-sm backdrop-blur transition hover:bg-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 dark:border-slate-700 dark:bg-slate-900/90 dark:text-white"
              data-carousel-prev
              aria-label="Previous slide"
            >
              <span aria-hidden="true">‹</span>
            </button>
            <button
              type="button"
              class="absolute right-4 top-1/2 flex -translate-y-1/2 items-center justify-center rounded-full border border-slate-200 bg-white/90 p-3 text-slate-900 shadow-sm backdrop-blur transition hover:bg-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 dark:border-slate-700 dark:bg-slate-900/90 dark:text-white"
              data-carousel-next
              aria-label="Next slide"
            >
              <span aria-hidden="true">›</span>
            </button>
          </>
        )}
      </div>

      {showIndicators && (
        <div
          class="absolute bottom-4 left-1/2 flex -translate-x-1/2 gap-3"
          data-carousel-indicators
          role="tablist"
          aria-label="Carousel slides"
        >
          {slides.map((_slide, index) => (
            <button
              type="button"
              class="h-2.5 w-2.5 rounded-full border border-slate-300 bg-slate-400/60 transition-opacity focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 dark:border-slate-600 dark:bg-slate-600/70"
              data-carousel-indicator={index}
              aria-label={`Go to slide ${index + 1}`}
              role="tab"
              aria-controls={`${id}-slide-${index}`}
            />
          ))}
        </div>
      )}
    </div>
  )
}

<script is:inline>
  (function setupCarousel() {
    const root = document.getElementById('${id}');
    if (!(root instanceof HTMLElement)) return;

    const track = root.querySelector('[data-carousel-track]');
    if (!(track instanceof HTMLElement)) return;

    const slideCount = parseInt(root.dataset.slideCount || '0', 10);
    if (Number.isNaN(slideCount) || slideCount <= 0) return;

    const autoplay =
      root.dataset.autoplay === 'true' &&
      !window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    const loop = root.dataset.loop === 'true';
    const interval = parseInt(root.dataset.interval || '5000', 10);

    const indicators = Array.from(
      root.querySelectorAll('[data-carousel-indicator]')
    );
    const prevButton = root.querySelector('[data-carousel-prev]');
    const nextButton = root.querySelector('[data-carousel-next]');

    let currentIndex = 0;
    let timer = null;
    let isPointerDown = false;
    let startX = 0;
    let deltaX = 0;

    const update = () => {
      track.style.transform = `translateX(-${currentIndex * 100}%)`;
      indicators.forEach((indicator, index) => {
        if (!(indicator instanceof HTMLElement)) return;
        const isActive = index === currentIndex;
        indicator.style.opacity = isActive ? '1' : '0.45';
        indicator.dataset.active = isActive ? 'true' : 'false';
        indicator.setAttribute('aria-selected', isActive ? 'true' : 'false');
        indicator.setAttribute('tabindex', isActive ? '0' : '-1');
      });
    };

    const goTo = (index) => {
      if (index < 0) {
        currentIndex = loop ? (slideCount + index) % slideCount : 0;
      } else if (index >= slideCount) {
        currentIndex = loop ? index % slideCount : slideCount - 1;
      } else {
        currentIndex = index;
      }
      update();
    };

    const next = () => goTo(currentIndex + 1);
    const prev = () => goTo(currentIndex - 1);

    if (prevButton instanceof HTMLElement)
      prevButton.addEventListener('click', prev);
    if (nextButton instanceof HTMLElement)
      nextButton.addEventListener('click', next);

    indicators.forEach((indicator, index) => {
      if (!(indicator instanceof HTMLElement)) return;
      indicator.addEventListener('click', () => goTo(index));
      indicator.addEventListener('keydown', (event) => {
        if (event.key === 'Enter' || event.key === ' ') {
          event.preventDefault();
          goTo(index);
        } else if (event.key === 'ArrowLeft') {
          event.preventDefault();
          goTo(index - 1);
          const items = Array.from(
            root.querySelectorAll('[data-carousel-indicator]')
          ).filter((el) => el instanceof HTMLElement);
          if (items[currentIndex] instanceof HTMLElement) {
            items[currentIndex].focus();
          }
        } else if (event.key === 'ArrowRight') {
          event.preventDefault();
          goTo(index + 1);
          const items = Array.from(
            root.querySelectorAll('[data-carousel-indicator]')
          ).filter((el) => el instanceof HTMLElement);
          if (items[currentIndex] instanceof HTMLElement) {
            items[currentIndex].focus();
          }
        }
      });
    });

    if (autoplay) {
      const stop = () => {
        if (timer) {
          window.clearInterval(timer);
          timer = null;
        }
      };
      const start = () => {
        stop();
        timer = window.setInterval(
          next,
          Number.isNaN(interval) ? 5000 : interval
        );
      };

      root.addEventListener('mouseenter', stop);
      root.addEventListener('mouseleave', start);
      start();
    }

    const onPointerDown = (event) => {
      isPointerDown = true;
      startX = event.clientX;
      deltaX = 0;
      if (typeof root.setPointerCapture === 'function') {
        root.setPointerCapture(event.pointerId);
      }
    };

    const onPointerMove = (event) => {
      if (!isPointerDown) return;
      deltaX = event.clientX - startX;
      const offset = (deltaX / root.clientWidth) * 100;
      track.style.transition = 'none';
      track.style.transform = `translateX(calc(${-(currentIndex * 100)}% + ${offset}%))`;
    };

    const onPointerUp = (event) => {
      if (!isPointerDown) return;
      isPointerDown = false;
      if (typeof root.releasePointerCapture === 'function') {
        root.releasePointerCapture(event.pointerId);
      }
      track.style.transition = '';

      const threshold = root.clientWidth * 0.15;
      if (deltaX > threshold) {
        prev();
      } else if (deltaX < -threshold) {
        next();
      } else {
        update();
      }
    };

    root.addEventListener('pointerdown', onPointerDown);
    root.addEventListener('pointermove', onPointerMove);
    root.addEventListener('pointerup', onPointerUp);
    root.addEventListener('pointercancel', onPointerUp);
    root.addEventListener('pointerleave', onPointerUp);

    update();
  })();
</script>
