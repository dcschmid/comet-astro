---
export interface Props {
  className?: string;
  html?: string;
  size?: 'sm' | 'md' | 'lg' | 'xl';
  invert?: boolean;
  fullWidth?: boolean;
}

const {
  className = '',
  html = undefined,
  size = 'lg',
  invert = false,
  fullWidth = false,
} = Astro.props as Props;

let sanitizedHtml =
  typeof html === 'string' ? html.replace(/\\n/g, '\n').trim() : undefined;
if (typeof sanitizedHtml === 'string') {
  sanitizedHtml = sanitizedHtml
    .replace(/\n?\s*```\s*$/m, '')
    .replace(/```/g, '')
    .replace(/\\`/g, '')
    .replace(/&#96;|&#x60;|&grave;/g, '')
    .trim();
}

const sizeClass = (() => {
  switch (size) {
    case 'sm':
      return 'prose-sm';
    case 'md':
      return 'prose';
    case 'xl':
      return 'prose-xl';
    case 'lg':
    default:
      return 'prose-lg';
  }
})();

const classes = [
  'prose',
  sizeClass,
  invert ? 'prose-invert' : '',
  fullWidth ? 'max-w-none' : '',
  invert
    ? 'prose-headings:text-slate-100 prose-p:text-slate-100 prose-strong:text-slate-100 prose-code:text-blue-200 prose-a:text-blue-200 hover:prose-a:text-blue-100'
    : 'text-slate-800 prose-headings:text-slate-900 prose-p:text-slate-800 prose-strong:text-slate-900 prose-code:text-blue-700 prose-a:text-blue-700 hover:prose-a:text-blue-800 dark:text-slate-200 dark:prose-headings:text-slate-100 dark:prose-p:text-slate-200 dark:prose-strong:text-slate-100 dark:prose-code:text-blue-300 dark:prose-a:text-blue-300 hover:dark:prose-a:text-blue-200',
  'prose-img:rounded-xl prose-img:shadow-sm prose-hr:border-slate-200 dark:prose-hr:border-slate-700 prose-blockquote:text-slate-700 dark:prose-blockquote:text-slate-200 prose-blockquote:border-slate-300 dark:prose-blockquote:border-slate-600',
  className,
]
  .filter(Boolean)
  .join(' ');
---

<div class={classes}>
  {sanitizedHtml ? <div set:html={sanitizedHtml} /> : <slot />}
</div>
