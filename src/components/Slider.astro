---
interface Props {
  name: string;
  label?: string;
  min?: number;
  max?: number;
  step?: number;
  value?: number;
  showValue?: boolean;
  showMinMax?: boolean;
  disabled?: boolean;
  className?: string;
  id?: string;
}

const {
  name,
  label,
  min = 0,
  max = 100,
  step = 1,
  value = min,
  showValue = true,
  showMinMax = false,
  disabled = false,
  className = '',
  id = name,
} = Astro.props;
---

<div
  class={`space-y-2 text-slate-900 dark:text-slate-100 ${className}`.trim()}
  data-slider-root
>
  {
    label && (
      <div class="flex items-center justify-between">
        <label
          for={id}
          class="text-sm font-medium text-slate-800 dark:text-slate-200"
        >
          {label}
        </label>
        {showValue && (
          <span
            class="text-sm font-semibold text-blue-700 tabular-nums dark:text-blue-300"
            data-slider-value
          >
            {value}
          </span>
        )}
      </div>
    )
  }

  <div class="relative">
    <input
      type="range"
      id={id}
      name={name}
      min={min}
      max={max}
      step={step}
      value={value}
      disabled={disabled}
      class={`w-full h-2 appearance-none rounded-lg bg-slate-200 transition disabled:cursor-not-allowed disabled:opacity-60 dark:bg-slate-800
        focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-600 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:focus-visible:ring-offset-slate-900
        [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:h-5 [&::-webkit-slider-thumb]:w-5 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:border-2 [&::-webkit-slider-thumb]:border-white [&::-webkit-slider-thumb]:bg-blue-600 [&::-webkit-slider-thumb]:shadow [&::-webkit-slider-thumb]:transition [&::-webkit-slider-thumb]:hover:scale-110 [&::-webkit-slider-thumb]:hover:bg-blue-500 [&::-webkit-slider-thumb]:active:scale-110
        [&::-moz-range-thumb]:h-5 [&::-moz-range-thumb]:w-5 [&::-moz-range-thumb]:rounded-full [&::-moz-range-thumb]:border-0 [&::-moz-range-thumb]:bg-blue-600 [&::-moz-range-thumb]:shadow [&::-moz-range-thumb]:transition [&::-moz-range-thumb]:hover:scale-110 [&::-moz-range-thumb]:hover:bg-blue-500 [&::-moz-range-thumb]:active:scale-110
        dark:[&::-webkit-slider-thumb]:border-slate-900 dark:[&::-webkit-slider-thumb]:bg-blue-500 dark:[&::-moz-range-thumb]:bg-blue-500`}
      data-slider
    />
    <div
      class="pointer-events-none absolute left-0 top-1/2 h-2 -translate-y-1/2 rounded-lg bg-blue-600 dark:bg-blue-500"
      data-slider-fill
      style={`width: ${max === min ? 0 : ((value - min) / (max - min)) * 100}%`}
    >
    </div>
  </div>

  {
    showMinMax && (
      <div class="flex justify-between text-xs font-medium text-slate-600 dark:text-slate-400">
        <span>{min}</span>
        <span>{max}</span>
      </div>
    )
  }
</div>

<script is:inline>
  (function () {
    const root = document.currentScript?.previousElementSibling;
    if (!(root instanceof HTMLElement)) return;
    const slider = root.querySelector('[data-slider]');
    if (!(slider instanceof HTMLInputElement)) return;
    const valueDisplay = root.querySelector('[data-slider-value]');
    const fill = root.querySelector('[data-slider-fill]');

    const update = () => {
      const current = Number.parseFloat(slider.value);
      const minimum = Number.parseFloat(slider.min);
      const maximum = Number.parseFloat(slider.max);
      const range = maximum - minimum;
      const percent = range <= 0 ? 0 : ((current - minimum) / range) * 100;
      if (valueDisplay instanceof HTMLElement) {
        valueDisplay.textContent = slider.value;
      }
      if (fill instanceof HTMLElement) {
        fill.style.width = `${percent}%`;
      }
    };

    slider.addEventListener('input', update);
    slider.addEventListener('change', update);
    update();
  })();
</script>
