---
/**
 * ShareOverlay - quick share dialog with copy link
 */
interface ShareTarget {
  name: string;
  href: string;
}

interface Props {
  url?: string;
  title?: string;
  open?: boolean;
  className?: string;
}

const props = Astro.props as Props;
const shareUrl = props.url ?? Astro.url.toString();
const shareTitle = props.title ?? '';
const overlayOpen = props.open ?? false;
const overlayClassName = props.className ?? '';

const encodedUrl = encodeURIComponent(shareUrl);
const encodedTitle = encodeURIComponent(shareTitle);
const resolvedTargets: ShareTarget[] = [
  {
    name: 'X/Twitter',
    href: `https://twitter.com/intent/tweet?url=${encodedUrl}&text=${encodedTitle}`,
  },
  {
    name: 'Facebook',
    href: `https://www.facebook.com/sharer/sharer.php?u=${encodedUrl}`,
  },
  {
    name: 'LinkedIn',
    href: `https://www.linkedin.com/shareArticle?mini=true&url=${encodedUrl}&title=${encodedTitle}`,
  },
];

const overlayId = `comet-share-overlay-${Math.random().toString(36).slice(2, 9)}`;
const inputId = `${overlayId}-url`;
const headingId = `${overlayId}-title`;
---

<div
  class={`fixed inset-0 z-50 ${overlayOpen ? '' : 'hidden'} flex items-start justify-center px-4 py-8 sm:py-12`.trim()}
  id={overlayId}
  data-share-overlay
  data-open={overlayOpen}
  role="dialog"
  aria-modal="true"
  aria-labelledby={headingId}
>
  <div
    class="absolute inset-0 bg-slate-900/75 backdrop-blur-sm transition-opacity"
    data-share-backdrop
  >
  </div>
  <div
    class={`relative z-10 w-full max-w-xl rounded-2xl border border-slate-200 bg-white p-6 text-slate-900 shadow-2xl dark:border-slate-700 dark:bg-slate-950 dark:text-slate-100 ${overlayClassName}`.trim()}
  >
    <header class="mb-4 flex items-center justify-between gap-3">
      <h2
        id={headingId}
        class="text-lg font-semibold text-slate-900 dark:text-slate-100"
      >
        Share
      </h2>
      <button
        type="button"
        class="inline-flex min-h-[40px] items-center justify-center rounded-lg border border-slate-300 bg-white px-3 py-1.5 text-sm font-semibold text-slate-900 transition hover:bg-slate-100 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-600 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:border-slate-600 dark:bg-slate-900 dark:text-slate-100 dark:hover:bg-slate-800 dark:focus-visible:ring-offset-slate-900"
        data-share-close
      >
        Close
      </button>
    </header>

    <div class="mb-4 flex flex-col gap-3 sm:flex-row sm:items-center">
      <div class="flex-1">
        <label class="sr-only" for={inputId}>Share URL</label>
        <input
          id={inputId}
          class="w-full rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm font-medium text-slate-900 shadow-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-600 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:border-slate-600 dark:bg-slate-900 dark:text-slate-100 dark:focus-visible:ring-offset-slate-900"
          value={shareUrl}
          readOnly
        />
      </div>
      <button
        type="button"
        class="inline-flex min-h-[40px] items-center justify-center rounded-lg border border-blue-600 bg-blue-600 px-4 text-sm font-semibold text-white shadow-sm transition hover:bg-blue-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-offset-2 focus-visible:ring-offset-blue-600 dark:border-blue-500 dark:bg-blue-500 dark:text-slate-900 dark:hover:bg-blue-400 dark:focus-visible:ring-offset-blue-500"
        data-share-copy
      >
        Copy link
      </button>
    </div>

    <div class="flex flex-wrap gap-2">
      {
        resolvedTargets.map((t) => (
          <a
            href={t.href}
            target="_blank"
            rel="noopener noreferrer"
            class="inline-flex items-center rounded-lg border border-slate-300 bg-white px-3 py-2 text-sm font-semibold text-slate-900 no-underline transition hover:bg-slate-100 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-600 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:border-slate-600 dark:bg-slate-900 dark:text-slate-100 dark:hover:bg-slate-800 dark:focus-visible:ring-offset-slate-900"
          >
            {t.name}
            <span class="sr-only"> (opens in a new tab)</span>
          </a>
        ))
      }
    </div>
  </div>
</div>

<script is:inline>
  (function () {
    const root = document.getElementById('${overlayId}');
    if (!(root instanceof HTMLElement)) return;
    const win = window;
    if (typeof win.__cometModalLockCount !== 'number') {
      win.__cometModalLockCount = 0;
    }
    if (typeof win.__cometModalOriginalOverflow !== 'string') {
      win.__cometModalOriginalOverflow = document.body.style.overflow || '';
    }

    const closeButtons = root.querySelectorAll('[data-share-close]');
    const backdrop = root.querySelector('[data-share-backdrop]');
    const copyButton = root.querySelector('[data-share-copy]');
    const input = root.querySelector('input');

    if (!(input instanceof HTMLInputElement)) return;

    const focusableSelectors = [
      'a[href]',
      'area[href]',
      'button:not([disabled])',
      'input:not([disabled]):not([type="hidden"])',
      'select:not([disabled])',
      'textarea:not([disabled])',
      '[tabindex]:not([tabindex="-1"])',
    ].join(',');

    let returnFocus = null;

    const getFocusable = () =>
      Array.from(root.querySelectorAll(focusableSelectors)).filter(
        (el) => el instanceof HTMLElement && el.offsetParent !== null
      );

    const setOpenState = (isOpen) => {
      const wasOpen = root.getAttribute('data-open') === 'true';
      if (wasOpen === isOpen) {
        root.classList.toggle('hidden', !isOpen);
        return;
      }
      root.setAttribute('data-open', String(isOpen));
      root.classList.toggle('hidden', !isOpen);

      if (isOpen) {
        win.__cometModalLockCount += 1;
        if (win.__cometModalLockCount === 1) {
          document.body.style.overflow = 'hidden';
        }
        returnFocus =
          document.activeElement instanceof HTMLElement
            ? document.activeElement
            : null;
        input.focus({ preventScroll: true });
        input.select();
      } else {
        win.__cometModalLockCount = Math.max(0, win.__cometModalLockCount - 1);
        if (win.__cometModalLockCount === 0) {
          document.body.style.overflow = win.__cometModalOriginalOverflow || '';
        }
        if (returnFocus instanceof HTMLElement) {
          returnFocus.focus({ preventScroll: true });
        }
      }
    };

    const handleKeydown = (event) => {
      if (root.getAttribute('data-open') !== 'true') return;
      if (event.key === 'Escape') {
        event.stopPropagation();
        setOpenState(false);
        return;
      }
      if (event.key === 'Tab') {
        const focusables = getFocusable();
        if (!focusables.length) return;
        const activeElement =
          document.activeElement instanceof HTMLElement
            ? document.activeElement
            : null;
        const currentIndex = activeElement
          ? focusables.indexOf(activeElement)
          : -1;
        let nextIndex = currentIndex;
        if (event.shiftKey) {
          nextIndex =
            currentIndex <= 0 ? focusables.length - 1 : currentIndex - 1;
        } else {
          nextIndex =
            currentIndex === focusables.length - 1 ? 0 : currentIndex + 1;
        }
        event.preventDefault();
        focusables[nextIndex].focus({ preventScroll: true });
      }
    };

    closeButtons.forEach((btn) => {
      btn.addEventListener('click', (event) => {
        event.preventDefault();
        setOpenState(false);
      });
    });

    backdrop?.addEventListener('click', () => setOpenState(false));
    root.addEventListener('keydown', handleKeydown);

    copyButton?.addEventListener('click', async (event) => {
      event.preventDefault();
      if (!(copyButton instanceof HTMLElement)) return;
      try {
        await navigator.clipboard.writeText(input.value);
        copyButton.dataset.state = 'copied';
        copyButton.textContent = 'Copied!';
        window.setTimeout(() => {
          copyButton.dataset.state = '';
          copyButton.textContent = 'Copy link';
        }, 1200);
      } catch {
        copyButton.textContent = 'Copy failed';
        window.setTimeout(() => {
          copyButton.textContent = 'Copy link';
        }, 1200);
      }
    });

    if (!win.__cometShareOverlayRegistry) {
      win.__cometShareOverlayRegistry = new Map();
    }
    win.__cometShareOverlayRegistry.set(root.id, {
      open: () => setOpenState(true),
      close: () => setOpenState(false),
    });

    if (root.getAttribute('data-open') === 'true') {
      setOpenState(true);
    }
  })();
</script>
