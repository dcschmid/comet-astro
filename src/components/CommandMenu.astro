---
interface Command {
  id: string;
  label: string;
  description?: string;
  icon?: string;
  action?: string;
  keywords?: string[];
}

interface Props {
  commands: Command[];
  placeholder?: string;
  shortcut?: string;
  className?: string;
}

const {
  commands,
  placeholder = 'Search commands...',
  shortcut = 'Ctrl+K',
  className = '',
} = Astro.props;
---

<div
  class="fixed inset-0 z-50 flex items-start justify-center bg-slate-950/60 pt-20 backdrop-blur-sm transition duration-200 ease-out invisible opacity-0"
  data-command-menu
  aria-hidden="true"
>
  <div
    class={`w-full max-w-2xl overflow-hidden rounded-2xl border border-slate-200 bg-white text-slate-900 shadow-2xl ring-1 ring-black/5 dark:border-slate-700 dark:bg-slate-950 dark:text-slate-100 ${className}`}
    role="dialog"
    aria-modal="true"
    aria-label="Command menu"
  >
    <div
      class="relative border-b border-slate-200 bg-slate-100/60 px-4 py-3 dark:border-slate-800 dark:bg-slate-900/40"
    >
      <input
        type="text"
        placeholder={placeholder}
        class="w-full rounded-lg border border-slate-300 bg-white px-4 py-3 text-sm font-semibold text-slate-900 placeholder-slate-400 shadow-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 dark:border-slate-600 dark:bg-slate-900 dark:text-slate-100 dark:placeholder-slate-500"
        data-command-input
        role="combobox"
        aria-expanded="false"
        aria-autocomplete="list"
        aria-haspopup="listbox"
      />
      <kbd
        class="absolute right-4 top-3.5 hidden gap-1 rounded-md border border-slate-300 bg-white px-2 py-1 text-[10px] font-semibold text-slate-600 sm:inline-flex dark:border-slate-600 dark:bg-slate-900 dark:text-slate-300"
      >
        <span>{shortcut}</span>
        <span>ESC</span>
      </kbd>
    </div>

    <div
      class="max-h-96 overflow-y-auto px-2 py-3"
      data-command-list
      role="listbox"
    >
      {
        commands.map((cmd, index) => (
          <button
            type="button"
            class="group flex w-full items-start gap-3 rounded-xl px-3 py-2 text-left transition hover:bg-blue-100 focus-visible:bg-blue-100 focus-visible:outline-none dark:hover:bg-blue-500/20 dark:focus-visible:bg-blue-500/20"
            data-command-item
            data-command-id={cmd.id}
            data-command-action={cmd.action}
            data-command-keywords={cmd.keywords?.join(' ')}
            role="option"
            aria-selected="false"
            tabIndex={index === 0 ? 0 : -1}
          >
            {cmd.icon && (
              <span class="flex-shrink-0 text-lg text-blue-600 dark:text-blue-300">
                {cmd.icon}
              </span>
            )}
            <div class="flex-1">
              <div class="text-sm font-semibold text-slate-800 dark:text-slate-100">
                {cmd.label}
              </div>
              {cmd.description && (
                <p class="mt-0.5 text-xs text-slate-500 dark:text-slate-300">
                  {cmd.description}
                </p>
              )}
            </div>
          </button>
        ))
      }
    </div>

    <div
      class="border-t border-slate-200 bg-slate-50 px-4 py-2 text-xs font-medium text-slate-500 dark:border-slate-800 dark:bg-slate-900/60 dark:text-slate-400"
    >
      Press {shortcut} or ESC to close
    </div>
  </div>
</div>

<script is:inline>
  (function () {
    const menu = document.querySelector('[data-command-menu]');
    if (!(menu instanceof HTMLElement)) return;
    const dialog = menu.querySelector('[role="dialog"]');
    const input = menu.querySelector('[data-command-input]');
    const list = menu.querySelector('[data-command-list]');
    if (
      !(dialog instanceof HTMLElement) ||
      !(input instanceof HTMLInputElement) ||
      !(list instanceof HTMLElement)
    )
      return;

    const getItems = () =>
      Array.from(list.querySelectorAll('[data-command-item]')).filter(
        (el) => el instanceof HTMLElement
      );
    const getVisibleItems = () =>
      getItems().filter((item) => !item.classList.contains('hidden'));

    let activeIndex = -1;
    let isOpen = false;
    let lastFocused = null as HTMLElement | null;

    const setAriaSelected = (item, selected) => {
      item.setAttribute('aria-selected', selected ? 'true' : 'false');
      item.tabIndex = selected ? 0 : -1;
      item.classList.toggle('ring-2', selected);
      item.classList.toggle('ring-blue-500', selected);
    };

    const resetActive = () => {
      getItems().forEach((item) => setAriaSelected(item, false));
      activeIndex = -1;
    };

    const focusItem = (index) => {
      const visible = getVisibleItems();
      if (!visible.length) return;
      const clamped = Math.max(0, Math.min(index, visible.length - 1));
      visible.forEach((item, idx) => setAriaSelected(item, idx === clamped));
      visible[clamped].focus({ preventScroll: true });
      activeIndex = clamped;
    };

    const filterCommands = (query) => {
      const normalized = query.trim().toLowerCase();
      getItems().forEach((item) => {
        const label = item.textContent?.toLowerCase() ?? '';
        const keywords =
          item.getAttribute('data-command-keywords')?.toLowerCase() ?? '';
        const matches =
          !normalized ||
          label.includes(normalized) ||
          keywords.includes(normalized);
        item.classList.toggle('hidden', !matches);
      });
      resetActive();
      const visible = getVisibleItems();
      if (visible.length) {
        visible[0].tabIndex = 0;
      }
    };

    const open = () => {
      if (isOpen) return;
      isOpen = true;
      lastFocused =
        document.activeElement instanceof HTMLElement
          ? document.activeElement
          : null;
      menu.classList.remove('invisible');
      requestAnimationFrame(() => {
        menu.classList.remove('opacity-0');
      });
      menu.setAttribute('aria-hidden', 'false');
      input.setAttribute('aria-expanded', 'true');
      document.body.style.setProperty('overflow', 'hidden');
      window.setTimeout(() => input.focus({ preventScroll: true }), 20);
    };

    const close = () => {
      if (!isOpen) return;
      isOpen = false;
      menu.classList.add('opacity-0');
      menu.setAttribute('aria-hidden', 'true');
      input.setAttribute('aria-expanded', 'false');
      input.value = '';
      filterCommands('');
      document.body.style.removeProperty('overflow');
      window.setTimeout(() => {
        menu.classList.add('invisible');
      }, 150);
      lastFocused?.focus?.({ preventScroll: true });
    };

    input.addEventListener('input', () => {
      filterCommands(input.value);
    });

    input.addEventListener('keydown', (event) => {
      const visible = getVisibleItems();
      if (!visible.length) return;
      if (event.key === 'ArrowDown') {
        event.preventDefault();
        focusItem(0);
      } else if (event.key === 'Escape') {
        close();
      }
    });

    list.addEventListener('keydown', (event) => {
      const visible = getVisibleItems();
      if (!visible.length) return;
      if (event.key === 'ArrowDown') {
        event.preventDefault();
        focusItem(activeIndex + 1);
      } else if (event.key === 'ArrowUp') {
        event.preventDefault();
        focusItem(activeIndex - 1);
      } else if (event.key === 'Home') {
        event.preventDefault();
        focusItem(0);
      } else if (event.key === 'End') {
        event.preventDefault();
        focusItem(visible.length - 1);
      } else if (event.key === 'Escape') {
        event.preventDefault();
        close();
      } else if (event.key === 'Enter') {
        event.preventDefault();
        const current = visible[activeIndex];
        current?.click();
      }
    });

    list.addEventListener('click', (event) => {
      const item =
        event.target instanceof HTMLElement
          ? event.target.closest('[data-command-item]')
          : null;
      if (!(item instanceof HTMLElement)) return;
      const action = item.getAttribute('data-command-action');
      if (action) {
        window.location.assign(action);
      }
      close();
    });

    menu.addEventListener('click', (event) => {
      if (event.target === menu) close();
    });

    document.addEventListener('keydown', (event) => {
      if ((event.ctrlKey || event.metaKey) && event.key.toLowerCase() === 'k') {
        event.preventDefault();
        open();
      } else if (event.key === 'Escape') {
        close();
      }
    });

    filterCommands('');
  })();
</script>
