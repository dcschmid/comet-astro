---
/**
 * Tabs - accessible tabbed interface
 */
interface Tab {
  id: string;
  label: string;
  content?: string;
}

interface Props {
  tabs: Tab[];
  activeId?: string;
  className?: string;
}

const {
  tabs = [],
  activeId = tabs[0]?.id,
  className = '',
} = Astro.props as Props;
---

<div class={`text-slate-900 dark:text-slate-100 ${className}`.trim()}>
  <div role="tablist" aria-label="Tabs" class="flex flex-wrap gap-2">
    {
      tabs.map((t) => (
        <button
          type="button"
          role="tab"
          id={`tab-${t.id}`}
          aria-selected={t.id === activeId}
          aria-controls={`panel-${t.id}`}
          data-tab-id={t.id}
          tabIndex={t.id === activeId ? 0 : -1}
          class:list={[
            'min-h-[40px] rounded-lg border px-3 py-2 text-sm font-semibold transition focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-600 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:focus-visible:ring-offset-slate-900',
            t.id === activeId
              ? 'border-blue-600 bg-blue-600 text-white shadow-sm dark:border-blue-500 dark:bg-blue-500 dark:text-slate-900'
              : 'border-slate-300 bg-white text-slate-700 hover:bg-slate-100 dark:border-slate-600 dark:bg-slate-900 dark:text-slate-200 dark:hover:bg-slate-800',
          ]}
        >
          {t.label}
        </button>
      ))
    }
  </div>
  <div
    class="mt-4 rounded-xl border border-slate-200 bg-white p-4 shadow-sm dark:border-slate-800 dark:bg-slate-950"
  >
    {
      tabs.map((t) => (
        <div
          role="tabpanel"
          id={`panel-${t.id}`}
          aria-labelledby={`tab-${t.id}`}
          data-panel-id={t.id}
          aria-hidden={t.id === activeId ? 'false' : 'true'}
          tabIndex={0}
          class={t.id === activeId ? '' : 'hidden'}
        >
          {t.content ? <div set:html={t.content} /> : null}
        </div>
      ))
    }
  </div>
</div>

<script is:inline>
  (function () {
    const root = document.currentScript?.previousElementSibling;
    if (!(root instanceof HTMLElement)) return;
    const tabs = Array.from(root.querySelectorAll('[role="tab"]'));
    const panels = Array.from(root.querySelectorAll('[role="tabpanel"]'));

    const setActive = (id) => {
      tabs.forEach((button) => {
        if (!(button instanceof HTMLElement)) return;
        const isActive = button.getAttribute('data-tab-id') === id;
        button.setAttribute('aria-selected', isActive ? 'true' : 'false');
        button.tabIndex = isActive ? 0 : -1;
        button.classList.toggle('border-blue-600', isActive);
        button.classList.toggle('bg-blue-600', isActive);
        button.classList.toggle('text-white', isActive);
        button.classList.toggle('shadow-sm', isActive);
        button.classList.toggle('dark:border-blue-500', isActive);
        button.classList.toggle('dark:bg-blue-500', isActive);
        button.classList.toggle('dark:text-slate-900', isActive);
        button.classList.toggle('border-slate-300', !isActive);
        button.classList.toggle('bg-white', !isActive);
        button.classList.toggle('text-slate-700', !isActive);
        button.classList.toggle('dark:border-slate-600', !isActive);
        button.classList.toggle('dark:bg-slate-900', !isActive);
        button.classList.toggle('dark:text-slate-200', !isActive);
      });
      panels.forEach((panel) => {
        if (!(panel instanceof HTMLElement)) return;
        const isActive = panel.getAttribute('data-panel-id') === id;
        panel.classList.toggle('hidden', !isActive);
        panel.setAttribute('aria-hidden', isActive ? 'false' : 'true');
      });
    };

    const focusTabByIndex = (currentIndex, delta) => {
      if (!tabs.length) return;
      const nextIndex = (currentIndex + delta + tabs.length) % tabs.length;
      const nextTab = tabs[nextIndex];
      if (nextTab instanceof HTMLElement) {
        const id = nextTab.getAttribute('data-tab-id');
        if (id) {
          setActive(id);
          nextTab.focus();
        }
      }
    };

    tabs.forEach((button, index) => {
      if (!(button instanceof HTMLElement)) return;
      button.addEventListener('click', () => {
        const id = button.getAttribute('data-tab-id');
        if (id) {
          setActive(id);
        }
      });
      button.addEventListener('keydown', (event) => {
        const key = event.key;
        if (key === 'ArrowRight' || key === 'ArrowDown') {
          event.preventDefault();
          focusTabByIndex(index, 1);
        } else if (key === 'ArrowLeft' || key === 'ArrowUp') {
          event.preventDefault();
          focusTabByIndex(index, -1);
        } else if (key === 'Home') {
          event.preventDefault();
          focusTabByIndex(index, -index);
        } else if (key === 'End') {
          event.preventDefault();
          focusTabByIndex(index, tabs.length - 1 - index);
        }
      });
    });
  })();
</script>
