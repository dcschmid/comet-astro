---
interface Props {
  src?: string;
  alt?: string;
  name?: string;
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';
  variant?: 'circle' | 'square' | 'rounded';
  status?: 'online' | 'offline' | 'busy' | 'away';
  className?: string;
}

const {
  src,
  alt = '',
  name = '',
  size = 'md',
  variant = 'circle',
  status,
  className = '',
} = Astro.props as Props;

const avatarId = `avatar-${Math.random().toString(36).slice(2, 9)}`;

const sizeClasses: Record<NonNullable<Props['size']>, string> = {
  xs: 'h-8 w-8 text-xs',
  sm: 'h-10 w-10 text-sm',
  md: 'h-12 w-12 text-base',
  lg: 'h-16 w-16 text-lg',
  xl: 'h-20 w-20 text-xl',
  '2xl': 'h-24 w-24 text-2xl',
};

const variantClasses: Record<NonNullable<Props['variant']>, string> = {
  circle: 'rounded-full',
  square: 'rounded-lg',
  rounded: 'rounded-2xl',
};

const statusColors: Record<
  NonNullable<Props['status']>,
  { dot: string; label: string }
> = {
  online: {
    dot: 'bg-emerald-500 shadow-[0_0_0_2px_rgba(15,23,42,0.6)] dark:bg-emerald-400 dark:shadow-[0_0_0_2px_rgba(15,23,42,0.95)]',
    label: 'Online',
  },
  offline: {
    dot: 'bg-slate-400 shadow-[0_0_0_2px_rgba(15,23,42,0.6)] dark:bg-slate-500 dark:shadow-[0_0_0_2px_rgba(15,23,42,0.95)]',
    label: 'Offline',
  },
  busy: {
    dot: 'bg-rose-500 shadow-[0_0_0_2px_rgba(15,23,42,0.6)] dark:bg-rose-400 dark:shadow-[0_0_0_2px_rgba(15,23,42,0.95)]',
    label: 'Busy',
  },
  away: {
    dot: 'bg-amber-400 shadow-[0_0_0_2px_rgba(15,23,42,0.6)] dark:bg-amber-300 dark:shadow-[0_0_0_2px_rgba(15,23,42,0.95)]',
    label: 'Away',
  },
};

const getInitials = (fullName: string) =>
  fullName
    .trim()
    .split(/\s+/)
    .map((segment) => segment[0] || '')
    .join('')
    .toUpperCase()
    .slice(0, 2) || '?';

const initials = name ? getInitials(name) : '?';
const imageAlt = alt || name || 'Avatar';
const fallbackLabel = name ? `Avatar for ${name}` : imageAlt;
const hasStatus = Boolean(status && statusColors[status]);
const statusId = hasStatus ? `${avatarId}-status` : undefined;
const wrapperDescribedBy = hasStatus ? statusId : undefined;
const sizeClass = sizeClasses[size] ?? sizeClasses.md;
const variantClass = variantClasses[variant] ?? variantClasses.circle;
const statusConfig = status ? statusColors[status] : undefined;
const dotSize = ['xs', 'sm'].includes(size) ? 'h-3 w-3' : 'h-3.5 w-3.5';
const textColor =
  'text-slate-50 dark:text-slate-100 font-semibold tracking-wide uppercase';
const fallbackBackground =
  'bg-slate-700 dark:bg-slate-600 bg-[radial-gradient(circle_at_30%_30%,rgba(255,255,255,0.25)_0,transparent_55%)]';
---

<div
  class={`relative inline-flex items-center justify-center ${className}`.trim()}
  aria-describedby={wrapperDescribedBy}
  data-avatar
>
  <div
    class={`${sizeClass} ${variantClass} flex items-center justify-center overflow-hidden bg-slate-200 text-slate-900 shadow-inner ring-1 ring-slate-300/70 transition dark:bg-slate-800/90 dark:text-slate-50 dark:ring-white/10`}
    role={!src ? 'img' : undefined}
    aria-label={!src ? fallbackLabel : undefined}
    title={name || alt || undefined}
  >
    {
      src ? (
        <img
          src={src}
          alt={imageAlt}
          class="h-full w-full object-cover"
          loading="lazy"
          decoding="async"
        />
      ) : (
        <span
          class={`flex h-full w-full items-center justify-center ${textColor} ${fallbackBackground}`}
        >
          {initials}
        </span>
      )
    }
  </div>
  {
    hasStatus && statusConfig && (
      <>
        <span
          class={`absolute bottom-1 right-1 rounded-full ${dotSize} ${statusConfig.dot}`}
          aria-hidden="true"
        />
        <span id={statusId} class="sr-only">
          Status: {statusConfig.label}
        </span>
      </>
    )
  }
</div>
