---
interface Props {
  src: string;
  title?: string;
  artist?: string;
  cover?: string;
  autoplay?: boolean;
  loop?: boolean;
  variant?: 'compact' | 'full';
  coverAspect?: 'square' | 'wide';
  captionsSrc?: string;
  captionsLabel?: string;
  className?: string;
}

const {
  src,
  title,
  artist,
  cover,
  autoplay = false,
  loop = false,
  variant = 'full',
  coverAspect = 'square',
  captionsSrc,
  captionsLabel = 'Transcript',
  className = '',
} = Astro.props as Props;

const baseClasses =
  'relative overflow-hidden rounded-2xl border border-slate-300 bg-slate-50 text-slate-900 shadow-sm transition-colors motion-reduce:transition-none dark:border-slate-700 dark:bg-slate-950 dark:text-slate-100';
const padding = variant === 'compact' ? 'p-4 sm:p-5' : 'p-6 sm:p-7';
const layoutGap = variant === 'compact' ? 'gap-5 sm:gap-6' : 'gap-6 sm:gap-7';
const shouldShowMetadata = variant === 'full' && (cover || title || artist);
const hasWideCover = variant === 'full' && cover && coverAspect === 'wide';
const controlsLayout =
  variant === 'compact'
    ? 'flex flex-col gap-3 sm:flex-row sm:items-center sm:gap-4 lg:gap-5'
    : 'flex flex-col gap-4 sm:flex-row sm:items-center sm:gap-5';
const controlsOffset = hasWideCover || shouldShowMetadata ? 'mt-4 sm:mt-5' : '';
const hasTranscript = Boolean(captionsSrc);
const transcriptSrcAttr = hasTranscript ? encodeURIComponent(captionsSrc!) : undefined;
const playerId = `audio-player-${Math.random().toString(36).slice(2, 9)}`;
---

<div
  id={playerId}
  class={`${baseClasses} ${padding} ${className}`.trim()}
  data-audio-player
  data-variant={variant}
  data-transcript-src={transcriptSrcAttr}
  data-transcript-label={captionsLabel}
  aria-live="polite"
>
  <div class={`flex flex-col ${layoutGap}`}>
    {
      hasWideCover && (
        <div class="overflow-hidden rounded-2xl border border-slate-200/80 bg-slate-200/40 dark:border-slate-700/60 dark:bg-slate-800/40">
          <div class="aspect-[16/9] w-full">
            <img
              src={cover}
              alt={title ? `${title} cover art` : 'Album cover'}
              class="h-full w-full object-cover"
            />
          </div>
        </div>
      )
    }

    {
      shouldShowMetadata && (
        <div
          class={
            hasWideCover
              ? 'space-y-1 text-left'
              : 'flex items-center gap-5 sm:gap-6'
          }
        >
          {
            cover && !hasWideCover && (
              <img
                src={cover}
                alt={title ? `${title} cover art` : 'Album cover'}
                class="h-24 w-24 flex-shrink-0 rounded-2xl object-cover shadow-sm ring-1 ring-slate-200/60 dark:ring-slate-700/60 sm:h-28 sm:w-28"
              />
            )
          }

          <div class="min-w-0 flex-1 space-y-1">
            {title && (
              <p class="truncate text-lg font-semibold tracking-tight text-slate-900 dark:text-slate-100">
                {title}
              </p>
            )}
            {artist && (
              <p class="truncate text-sm font-medium text-slate-600 dark:text-slate-300">
                {artist}
              </p>
            )}
          </div>
        </div>
      )
    }

    <audio
      src={src}
      preload="metadata"
      loop={loop}
      autoplay={autoplay}
      data-audio
      aria-label={title ? `Audio player for ${title}` : 'Audio player'}
    ></audio>

    <div class={`${controlsLayout} ${controlsOffset}`.trim()}>
      {
        variant === 'compact' &&
        cover && (
          <img
            src={cover}
            alt={title ? `${title} cover art` : 'Album cover'}
            class="h-14 w-14 flex-shrink-0 rounded-2xl object-cover shadow-sm ring-1 ring-slate-200/60 dark:ring-slate-700/60 sm:h-16 sm:w-16"
          />
        )
      }
      <button
        type="button"
        class="inline-flex h-12 w-12 min-h-[48px] min-w-[48px] items-center justify-center rounded-full bg-blue-600 text-lg font-semibold text-white shadow-sm transition hover:bg-blue-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-600 focus-visible:ring-offset-2 focus-visible:ring-offset-slate-50 motion-reduce:transition-none dark:bg-blue-500 dark:text-slate-950 dark:hover:bg-blue-400 dark:focus-visible:ring-offset-slate-950"
        data-play-pause
        aria-label="Play/Pause"
      >
        <span data-play-icon>‚ñ∂</span>
        <span data-pause-icon class="hidden">‚è∏</span>
      </button>

      <div class="flex flex-1 flex-col gap-3 sm:flex-row sm:items-center sm:gap-4">
        <span
          class="text-xs font-semibold uppercase tracking-wide text-slate-600 tabular-nums dark:text-slate-300"
          data-current-time>0:00</span
        >
        <input
          type="range"
          min="0"
          value="0"
          step="0.1"
          aria-label="Seek position"
          class="h-3 flex-1 appearance-none rounded-full bg-transparent transition focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-600 focus-visible:ring-offset-2 focus-visible:ring-offset-slate-50 motion-reduce:transition-none dark:focus-visible:ring-offset-slate-950"
          data-seek
        />
        <span
          class="text-xs font-semibold uppercase tracking-wide text-slate-600 tabular-nums dark:text-slate-300"
          data-duration>0:00</span
        >
      </div>

      <button
        type="button"
        class="inline-flex h-11 w-11 min-h-[44px] min-w-[44px] items-center justify-center rounded-full border border-slate-300 text-base font-semibold text-slate-600 transition hover:border-blue-500 hover:text-blue-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-600 focus-visible:ring-offset-2 focus-visible:ring-offset-slate-50 motion-reduce:transition-none dark:border-slate-600 dark:text-slate-300 dark:hover:border-blue-400 dark:hover:text-blue-300 dark:focus-visible:ring-offset-slate-950"
        data-mute
        aria-label="Mute audio"
        aria-pressed="false"
      >
        <span data-volume-icon>üîä</span>
        <span data-mute-icon class="hidden">üîá</span>
      </button>
    </div>
    {
      hasTranscript && (
        <div
          class="mt-6 overflow-hidden rounded-xl border border-slate-300/75 bg-slate-100/70 shadow-inner transition-colors motion-reduce:transition-none dark:border-slate-700/70 dark:bg-slate-900/60"
          data-transcript-container
        >
          <button
            type="button"
            class="flex w-full items-center justify-between gap-3 px-4 py-3 text-left text-sm font-semibold text-slate-800 transition-colors hover:bg-slate-200/60 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-600 focus-visible:ring-offset-2 focus-visible:ring-offset-slate-100 motion-reduce:transition-none dark:text-slate-100 dark:hover:bg-slate-800/60 dark:focus-visible:ring-offset-slate-900"
            data-transcript-toggle
            aria-expanded="false"
            aria-controls={`${playerId}-transcript`}
          >
            <span data-transcript-toggle-label>{captionsLabel}</span>
            <span aria-hidden="true" class="text-lg transition-transform" data-transcript-toggle-icon>
              ‚ñæ
            </span>
          </button>
          <div
            id={`${playerId}-transcript`}
            class="hidden border-t border-slate-300/70 bg-white/70 dark:border-slate-700/60 dark:bg-slate-950/60"
            data-transcript-panel
            role="group"
          >
            <div
              class="px-4 py-3 text-sm text-slate-500 dark:text-slate-300"
              data-transcript-loading
            >
              Loading transcript‚Ä¶
            </div>
            <div
              class="hidden px-4 py-3 text-sm text-rose-600 dark:text-rose-300"
              data-transcript-error
            >
              Unable to load transcript.
            </div>
            <ol
              class="hidden max-h-60 space-y-2 overflow-y-auto px-4 py-3 text-sm leading-relaxed text-slate-700 dark:text-slate-200"
              data-transcript-list
            ></ol>
          </div>
        </div>
      )
    }
  </div>
</div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const players = document.querySelectorAll('[data-audio-player]');

    const formatTime = (seconds) => {
      if (!Number.isFinite(seconds) || seconds < 0) return '0:00';
      const mins = Math.floor(seconds / 60);
      const secs = Math.floor(seconds % 60);
      return `${String(mins)}:${String(secs).padStart(2, '0')}`;
    };

    const updateSeekVisual = (input, audio) => {
      const max = Number(input.max) || 0;
      const value = Number(input.value) || 0;
      const percent = max > 0 ? Math.min(Math.max((value / max) * 100, 0), 100) : 0;
      input.style.setProperty('--seek-percent', `${percent}%`);
      if (audio instanceof HTMLAudioElement) {
        const seconds = Number.isFinite(value) ? value : audio.currentTime;
        const resolvedSeconds = Number.isFinite(seconds) ? seconds : 0;
        input.setAttribute('aria-valuenow', String(Math.floor(resolvedSeconds)));
        input.setAttribute('aria-valuetext', formatTime(resolvedSeconds));
        input.setAttribute('aria-valuemax', input.max || '0');
      }
    };

    const escapeHtml = (value) =>
      value.replace(/[&<>"']/g, (char) => {
        const map = {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          "'": '&#39;',
        };
        return map[char] || char;
      });

    const parseTime = (value) => {
      const parts = value.split(':').map((segment) => segment.trim());
      if (parts.length === 3) {
        const [hours, minutes, seconds] = parts;
        return (
          Number(hours) * 3600 +
          Number(minutes) * 60 +
          parseFloat(seconds.replace(',', '.'))
        );
      }
      if (parts.length === 2) {
        const [minutes, seconds] = parts;
        return Number(minutes) * 60 + parseFloat(seconds.replace(',', '.'));
      }
      return Number(value) || 0;
    };

    const parseVtt = (text) => {
      const sanitized = text.replace(/\r/g, '');
      const chunks = sanitized.split(/\n\n+/);
      const cues = [];
      chunks.forEach((chunk) => {
        const lines = chunk.trim().split('\n').filter(Boolean);
        if (!lines.length) return;
        const header = lines[0];
        let timingIndex = 0;
        if (header.startsWith('WEBVTT')) return;
        if (!header.includes('-->') && lines.length > 1) {
          timingIndex = 1;
        }
        const timingLine = lines[timingIndex];
        if (!timingLine || !timingLine.includes('-->')) return;
        const [rawStart, rawEnd] = timingLine
          .split('-->')
          .map((segment) => segment.trim().split(' ')[0]);
        const textLines = lines.slice(timingIndex + 1);
        const cueText = textLines.join(' ').trim();
        cues.push({
          start: parseTime(rawStart),
          end: parseTime(rawEnd),
          text: cueText,
        });
      });
      return cues.sort((a, b) => a.start - b.start);
    };

    players.forEach((player) => {
      if (!(player instanceof HTMLElement)) return;
      const audio = player.querySelector('[data-audio]');
      if (!(audio instanceof HTMLAudioElement)) return;

      const playPauseBtn = player.querySelector('[data-play-pause]');
      const playIcon = player.querySelector('[data-play-icon]');
      const pauseIcon = player.querySelector('[data-pause-icon]');
      const muteBtn = player.querySelector('[data-mute]');
      const volumeIcon = player.querySelector('[data-volume-icon]');
      const muteIcon = player.querySelector('[data-mute-icon]');
      const currentTimeEl = player.querySelector('[data-current-time]');
      const durationEl = player.querySelector('[data-duration]');
      const seekInput = player.querySelector('[data-seek]');
      const transcriptSrc = player.dataset.transcriptSrc
        ? decodeURIComponent(player.dataset.transcriptSrc)
        : null;
      const transcriptLabel = player.dataset.transcriptLabel || 'Transcript';
      const transcriptToggle = player.querySelector('[data-transcript-toggle]');
      const transcriptPanel = player.querySelector('[data-transcript-panel]');
      const transcriptList = player.querySelector('[data-transcript-list]');
      const transcriptLoading = player.querySelector('[data-transcript-loading]');
      const transcriptError = player.querySelector('[data-transcript-error]');
      const transcriptToggleLabel = player.querySelector('[data-transcript-toggle-label]');
      const transcriptToggleIcon = player.querySelector('[data-transcript-toggle-icon]');

      if (transcriptToggleLabel instanceof HTMLElement) {
        transcriptToggleLabel.textContent = transcriptLabel;
      }

      if (seekInput instanceof HTMLInputElement) {
        seekInput.setAttribute('aria-valuemin', '0');
        updateSeekVisual(seekInput, audio);
      }

      playPauseBtn?.addEventListener('click', () => {
        if (audio.paused) {
          audio.play().catch(() => {
            /* ignore */
          });
        } else {
          audio.pause();
        }
      });

      audio.addEventListener('play', () => {
        playIcon?.classList.add('hidden');
        pauseIcon?.classList.remove('hidden');
        if (playPauseBtn instanceof HTMLElement) {
          playPauseBtn.setAttribute('aria-label', 'Pause');
        }
      });

      audio.addEventListener('pause', () => {
        playIcon?.classList.remove('hidden');
        pauseIcon?.classList.add('hidden');
        if (playPauseBtn instanceof HTMLElement) {
          playPauseBtn.setAttribute('aria-label', 'Play');
        }
      });

      muteBtn?.addEventListener('click', () => {
        audio.muted = !audio.muted;
        if (volumeIcon instanceof HTMLElement)
          volumeIcon.classList.toggle('hidden', audio.muted);
        if (muteIcon instanceof HTMLElement)
          muteIcon.classList.toggle('hidden', !audio.muted);
        if (muteBtn instanceof HTMLElement) {
          muteBtn.setAttribute('aria-pressed', audio.muted ? 'true' : 'false');
          muteBtn.setAttribute(
            'aria-label',
            audio.muted ? 'Unmute audio' : 'Mute audio'
          );
        }
      });

      audio.addEventListener('loadedmetadata', () => {
        if (durationEl instanceof HTMLElement) {
          durationEl.textContent = formatTime(audio.duration);
        }
        if (seekInput instanceof HTMLInputElement) {
          seekInput.max = Number.isFinite(audio.duration)
            ? String(audio.duration)
            : '0';
          updateSeekVisual(seekInput, audio);
        }
      });

      audio.addEventListener('timeupdate', () => {
        if (currentTimeEl instanceof HTMLElement) {
          currentTimeEl.textContent = formatTime(audio.currentTime);
        }
        if (
          seekInput instanceof HTMLInputElement &&
          Number.isFinite(audio.duration) &&
          audio.duration > 0
        ) {
          seekInput.value = String(audio.currentTime);
          updateSeekVisual(seekInput, audio);
        }
      });

      seekInput?.addEventListener('input', () => {
        if (!(seekInput instanceof HTMLInputElement)) return;
        const next = Number(seekInput.value);
        if (Number.isFinite(next) && audio.duration > 0) {
          audio.currentTime = Math.min(Math.max(next, 0), audio.duration);
        }
        updateSeekVisual(seekInput, audio);
      });

      seekInput?.addEventListener('change', () => {
        if (!(seekInput instanceof HTMLInputElement)) return;
        const next = Number(seekInput.value);
        if (Number.isFinite(next) && audio.duration > 0) {
          audio.currentTime = Math.min(Math.max(next, 0), audio.duration);
        }
      });

      if (
        transcriptSrc &&
        transcriptToggle instanceof HTMLElement &&
        transcriptPanel instanceof HTMLElement &&
        transcriptList instanceof HTMLOListElement
      ) {
        let cues = [];
        let activeCueIndex = -1;
        let transcriptLoaded = false;
        let transcriptLoadingState = false;

        const setTranscriptExpanded = (expanded) => {
          transcriptPanel.classList.toggle('hidden', !expanded);
          transcriptToggle.setAttribute('aria-expanded', expanded ? 'true' : 'false');
          transcriptToggleIcon?.classList.toggle('rotate-180', expanded);
        };

        const clearHighlights = () => {
          transcriptList
            .querySelectorAll('[data-transcript-entry]')
            .forEach((entry) => entry.setAttribute('data-active', 'false'));
        };

        const updateActiveCue = (time) => {
          if (!transcriptLoaded || !cues.length) return;
          let nextIndex = cues.findIndex(
            (cue) => time >= cue.start && time < cue.end
          );
          if (nextIndex === -1 && time >= cues[cues.length - 1].end) {
            nextIndex = cues.length - 1;
          }
          if (nextIndex === activeCueIndex) return;
          activeCueIndex = nextIndex;
          clearHighlights();
          if (activeCueIndex >= 0) {
            const entry = transcriptList.querySelector(
              `[data-transcript-entry="${activeCueIndex}"]`
            );
            if (entry instanceof HTMLElement) {
              entry.setAttribute('data-active', 'true');
              entry.scrollIntoView({ block: 'nearest' });
            }
          }
        };

        const renderTranscript = () => {
          if (!transcriptLoaded) return;
          if (transcriptLoading instanceof HTMLElement) {
            transcriptLoading.classList.add('hidden');
          }
          if (transcriptError instanceof HTMLElement) {
            transcriptError.classList.add('hidden');
          }
          if (!cues.length) {
            if (transcriptError instanceof HTMLElement) {
              transcriptError.textContent = 'No transcript cues available.';
              transcriptError.classList.remove('hidden');
            }
            return;
          }
          transcriptList.innerHTML = cues
            .map(
              (cue, index) => `
                <li>
                  <button
                    type="button"
                    class="w-full rounded-lg bg-slate-100/60 px-3 py-2 text-left text-sm font-medium text-slate-700 transition hover:bg-blue-100/70 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-600 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:bg-slate-900/40 dark:text-slate-200 dark:hover:bg-blue-500/20 dark:focus-visible:ring-offset-slate-950"
                    data-transcript-entry="${index}"
                    data-cue-start="${cue.start}"
                    data-active="false"
                  >
                    ${escapeHtml(cue.text)}
                  </button>
                </li>
              `
            )
            .join('');
          transcriptList.classList.remove('hidden');
        };

        const loadTranscript = async () => {
          if (transcriptLoaded || transcriptLoadingState) return;
          transcriptLoadingState = true;
          try {
            if (transcriptLoading instanceof HTMLElement) {
              transcriptLoading.classList.remove('hidden');
            }
            const response = await fetch(transcriptSrc);
            if (!response.ok) throw new Error('Request failed');
            const text = await response.text();
            cues = parseVtt(text);
            transcriptLoaded = true;
            renderTranscript();
            updateActiveCue(audio.currentTime);
          } catch (error) {
            if (transcriptError instanceof HTMLElement) {
              transcriptError.textContent = 'Unable to load transcript.';
              transcriptError.classList.remove('hidden');
            }
            if (transcriptLoading instanceof HTMLElement) {
              transcriptLoading.classList.add('hidden');
            }
          } finally {
            transcriptLoadingState = false;
          }
        };

        transcriptToggle.addEventListener('click', () => {
          const expanded =
            transcriptToggle.getAttribute('aria-expanded') === 'true';
          const nextExpanded = !expanded;
          setTranscriptExpanded(nextExpanded);
          if (nextExpanded) {
            loadTranscript();
          }
        });

        transcriptList.addEventListener('click', (event) => {
          const target =
            event.target instanceof HTMLElement
              ? event.target.closest('[data-transcript-entry]')
              : null;
          if (!(target instanceof HTMLElement)) return;
          const start = Number(target.getAttribute('data-cue-start'));
          if (Number.isFinite(start)) {
            audio.currentTime = Math.max(start, 0);
            audio.play().catch(() => {});
          }
        });

        audio.addEventListener('timeupdate', () => {
          updateActiveCue(audio.currentTime);
        });

        audio.addEventListener('seeked', () => {
          updateActiveCue(audio.currentTime);
        });

        if (
          transcriptList instanceof HTMLElement &&
          transcriptList.hasChildNodes()
        ) {
          updateActiveCue(audio.currentTime);
        }

        setTranscriptExpanded(false);
      }
    });
  });

  const parseTime = (value) => {
    const parts = value.split(':').map((segment) => segment.trim());
    if (parts.length === 3) {
      const [hours, minutes, seconds] = parts;
      return Number(hours) * 3600 + Number(minutes) * 60 + parseFloat(seconds.replace(',', '.'));
    }
    if (parts.length === 2) {
      const [minutes, seconds] = parts;
      return Number(minutes) * 60 + parseFloat(seconds.replace(',', '.'));
    }
    return Number(value) || 0;
  };

  const parseVtt = (text) => {
    const sanitized = text.replace(/\r/g, '');
    const chunks = sanitized.split(/\n\n+/);
    const cues = [];
    chunks.forEach((chunk) => {
      const lines = chunk.trim().split('\n').filter(Boolean);
      if (!lines.length) return;
      const header = lines[0];
      let timingIndex = 0;
      if (header.startsWith('WEBVTT')) return;
      if (!header.includes('-->') && lines.length > 1) {
        timingIndex = 1;
      }
      const timingLine = lines[timingIndex];
      if (!timingLine || !timingLine.includes('-->')) return;
      const [rawStart, rawEnd] = timingLine.split('-->').map((segment) =>
        segment.trim().split(' ')[0]
      );
      const textLines = lines.slice(timingIndex + 1);
      const cueText = textLines.join(' ').trim();
      cues.push({
        start: parseTime(rawStart),
        end: parseTime(rawEnd),
        text: cueText,
      });
    });
    return cues.sort((a, b) => a.start - b.start);
  };
</script>

<style is:inline>
  [data-audio-player] {
    --seek-fill: rgb(37 99 235);
    --seek-bg: rgb(203 213 225);
    --seek-percent: 0%;
  }

  :where(.dark) [data-audio-player] {
    --seek-fill: rgb(96 165 250);
    --seek-bg: rgb(30 41 59);
  }

  [data-audio-player] [data-seek] {
    background: linear-gradient(
      90deg,
      var(--seek-fill) 0%,
      var(--seek-fill) var(--seek-percent),
      var(--seek-bg) var(--seek-percent),
      var(--seek-bg) 100%
    );
    height: 0.75rem;
    border-radius: 999px;
    border: 1px solid color-mix(in srgb, var(--seek-bg) 80%, transparent);
  }

  [data-audio-player] [data-seek]::-webkit-slider-thumb,
  [data-audio-player] [data-seek]::-moz-range-thumb {
    -webkit-appearance: none;
    appearance: none;
    height: 18px;
    width: 18px;
    border-radius: 999px;
    background: var(--seek-fill);
    border: 2px solid rgb(248 250 252);
    box-shadow: 0 1px 2px rgb(15 23 42 / 0.25);
  }

  :where(.dark) [data-audio-player] [data-seek]::-webkit-slider-thumb,
  :where(.dark) [data-audio-player] [data-seek]::-moz-range-thumb {
    border-color: rgb(15 23 42);
    box-shadow: 0 1px 4px rgb(15 23 42 / 0.45);
  }

  [data-audio-player] [data-seek]::-webkit-slider-runnable-track,
  [data-audio-player] [data-seek]::-moz-range-track {
    height: 0.75rem;
    border-radius: 999px;
    background: transparent;
  }

  [data-audio-player] [data-transcript-entry] {
    transition: background-color 0.2s ease, color 0.2s ease;
  }

  [data-audio-player] [data-transcript-entry][data-active='true'] {
    background: linear-gradient(
      90deg,
      rgba(37, 99, 235, 0.15) 0%,
      rgba(37, 99, 235, 0.05) 100%
    );
    color: rgb(30 64 175);
  }

  :where(.dark) [data-audio-player] [data-transcript-entry][data-active='true'] {
    background: linear-gradient(
      90deg,
      rgba(96, 165, 250, 0.18) 0%,
      rgba(96, 165, 250, 0.08) 100%
    );
    color: rgb(191 219 254);
  }
</style>
