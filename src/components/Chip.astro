---
interface Props {
  variant?: 'default' | 'primary' | 'success' | 'warning' | 'error';
  size?: 'sm' | 'md' | 'lg';
  removable?: boolean;
  href?: string;
  className?: string;
}

const {
  variant = 'default',
  size = 'md',
  removable = false,
  href,
  className = '',
} = Astro.props;

const variantClasses = {
  default:
    'border border-slate-300 bg-slate-100 text-slate-800 hover:bg-slate-200 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-100 dark:hover:bg-slate-700',
  primary:
    'border border-blue-600 bg-blue-600 text-white hover:bg-blue-500 dark:border-blue-500 dark:bg-blue-500 dark:hover:bg-blue-400',
  success:
    'border border-emerald-600 bg-emerald-600 text-white hover:bg-emerald-500 dark:border-emerald-500 dark:bg-emerald-500 dark:hover:bg-emerald-400',
  warning:
    'border border-amber-500 bg-amber-400 text-slate-900 hover:bg-amber-300 dark:border-amber-400 dark:bg-amber-300 dark:text-slate-900',
  error:
    'border border-rose-600 bg-rose-600 text-white hover:bg-rose-500 dark:border-rose-500 dark:bg-rose-500 dark:hover:bg-rose-400',
};

const sizeClasses = {
  sm: 'px-2 py-0.5 text-xs',
  md: 'px-3 py-1 text-sm',
  lg: 'px-4 py-1.5 text-base',
};

const Tag = href ? 'a' : 'span';
---

<Tag
  href={href}
  class={`inline-flex items-center gap-1.5 rounded-full font-semibold transition ${variantClasses[variant]} ${sizeClasses[size]} focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-offset-white focus-visible:ring-blue-400 dark:focus-visible:ring-offset-slate-900 ${className}`}
>
  <slot />
  {
    removable && (
      <button
        type="button"
        class="ml-0.5 inline-flex h-4 w-4 items-center justify-center rounded-full border border-transparent text-xs font-semibold transition hover:scale-105 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-400 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:focus-visible:ring-offset-slate-900"
        aria-label="Remove"
        data-chip-remove
      >
        âœ•
      </button>
    )
  }
</Tag>

<script is:inline>
  (() => {
    const script = document.currentScript;
    if (!(script instanceof HTMLScriptElement)) return;
    const chip = script.previousElementSibling;
    if (!(chip instanceof HTMLElement)) return;
    const removeBtn = chip.querySelector('[data-chip-remove]');
    if (!(removeBtn instanceof HTMLElement)) return;
    removeBtn.addEventListener('click', () => {
      chip.remove();
    });
  })();
</script>
