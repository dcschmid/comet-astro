---
interface Props {
  name: string;
  label?: string;
  value?: string;
  checked?: boolean;
  disabled?: boolean;
  required?: boolean;
  error?: string;
  className?: string;
  id?: string;
}

const {
  name,
  label,
  value,
  checked = false,
  disabled = false,
  required = false,
  error,
  className = '',
  id = name + (value ? `-${value}` : ''),
} = Astro.props;

const baseClasses =
  'h-5 w-5 rounded-md border-2 transition focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:focus-visible:ring-offset-slate-900';
const stateClasses = error
  ? 'border-rose-500 accent-rose-500'
  : 'border-slate-400 accent-blue-600 dark:border-slate-500 dark:accent-blue-500';
const disabledClasses = disabled
  ? 'cursor-not-allowed opacity-50'
  : 'cursor-pointer';
const descriptionId = error ? `${id}-error` : undefined;
---

<div
  class={`flex items-start gap-2 text-slate-800 dark:text-slate-100 ${className}`}
>
  <input
    type="checkbox"
    id={id}
    name={name}
    value={value}
    checked={checked}
    disabled={disabled}
    required={required}
    aria-invalid={error ? 'true' : undefined}
    aria-describedby={descriptionId}
    class={`${baseClasses} ${stateClasses} ${disabledClasses} mt-0.5 appearance-none bg-white dark:bg-slate-900`}
  />
  {
    label && (
      <label
        for={id}
        class={`text-sm ${disabled ? 'opacity-50' : 'cursor-pointer'}`}
      >
        {label}
        {required && <span class="ml-1 text-rose-500">*</span>}
      </label>
    )
  }
  {
    error && (
      <p id={descriptionId} class="mt-1 text-xs font-medium text-rose-500">
        {error}
      </p>
    )
  }
</div>
