---
interface Props {
  id: string;
  title?: string;
  position?: 'left' | 'right';
  size?: 'sm' | 'md' | 'lg' | 'full';
  dismissible?: boolean;
  className?: string;
}

const {
  id,
  title,
  position = 'right',
  size = 'md',
  dismissible = true,
  className = '',
} = Astro.props;

const sizeClasses = {
  sm: 'max-w-xs',
  md: 'max-w-md',
  lg: 'max-w-lg',
  full: 'max-w-full',
};

const positionClasses = {
  left: 'left-0',
  right: 'right-0',
};
---

<div
  id={id}
  class="fixed inset-0 z-50 invisible"
  data-drawer
  aria-hidden="true"
>
  <div
    class="absolute inset-0 bg-slate-950/60 opacity-0 transition-opacity duration-300"
    data-drawer-backdrop
  >
  </div>

  <div
    class={`absolute top-0 ${positionClasses[position]} h-full ${sizeClasses[size]} w-full border border-slate-200 bg-white text-slate-900 shadow-xl ${
      position === 'left' ? 'border-r' : 'border-l'
    } transform transition-transform duration-300 ease-out ${
      position === 'left' ? '-translate-x-full' : 'translate-x-full'
    } ${className} dark:border-slate-700 dark:bg-slate-900 dark:text-slate-100`}
    data-drawer-panel
    data-position={position}
  >
    <div class="flex flex-col h-full">
      {
        (title || dismissible) && (
          <header class="flex items-center justify-between border-b border-slate-200 px-6 py-4 dark:border-slate-700">
            {title && (
              <h2 class="text-lg font-semibold text-slate-900 dark:text-slate-100">
                {title}
              </h2>
            )}
            {dismissible && (
              <button
                type="button"
                class="ml-auto inline-flex h-9 w-9 items-center justify-center rounded-full border border-transparent text-slate-500 transition hover:text-blue-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:text-slate-300 dark:hover:text-blue-300 dark:focus-visible:ring-offset-slate-900"
                data-drawer-close
                aria-label="Close"
              >
                âœ•
              </button>
            )}
          </header>
        )
      }

      <div
        class="flex-1 overflow-y-auto px-6 py-5 text-sm leading-relaxed text-slate-700 dark:text-slate-200"
      >
        <slot />
      </div>

      <footer class="border-t border-slate-200 px-6 py-4 dark:border-slate-700">
        <slot name="actions">
          {
            dismissible && (
              <button
                type="button"
                class="rounded-lg border border-slate-300 bg-slate-100 px-4 py-2 text-sm font-semibold text-slate-700 transition hover:bg-slate-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:border-slate-600 dark:bg-slate-800 dark:text-slate-100 dark:hover:bg-slate-700 dark:focus-visible:ring-offset-slate-900"
                data-drawer-close
              >
                Close
              </button>
            )
          }
        </slot>
      </footer>
    </div>
  </div>
</div>

<script is:inline>
  (function () {
    const drawers = Array.from(
      document.querySelectorAll('[data-drawer]')
    ).filter((el) => el instanceof HTMLElement);
    if (!drawers.length) return;

    const lastFocusMap = new WeakMap();

    const getFocusableChildren = (container) =>
      Array.from(
        container.querySelectorAll(
          'a[href], button:not([disabled]), textarea, input, select, [tabindex]'
        )
      ).filter(
        (el) =>
          el instanceof HTMLElement &&
          el.tabIndex !== -1 &&
          !el.hasAttribute('disabled')
      );

    const closeDrawer = (drawer) => {
      if (!drawer) return;
      const backdrop = drawer.querySelector('[data-drawer-backdrop]');
      const panel = drawer.querySelector('[data-drawer-panel]');
      if (backdrop instanceof HTMLElement) {
        backdrop.classList.remove('opacity-100');
        backdrop.classList.add('opacity-0');
      }
      if (panel instanceof HTMLElement) {
        const position =
          panel.getAttribute('data-position') === 'left' ? 'left' : 'right';
        panel.classList.remove('translate-x-0');
        panel.classList.add(
          position === 'left' ? '-translate-x-full' : 'translate-x-full'
        );
      }
      drawer.setAttribute('aria-hidden', 'true');
      window.setTimeout(() => {
        drawer.classList.add('invisible');
      }, 200);
      const last = lastFocusMap.get(drawer);
      if (last instanceof HTMLElement) {
        last.focus({ preventScroll: true });
      }
      if (!document.querySelector('[data-drawer][aria-hidden="false"]')) {
        document.body.style.removeProperty('overflow');
      }
    };

    drawers.forEach((drawer) => {
      const backdrop = drawer.querySelector('[data-drawer-backdrop]');
      const panel = drawer.querySelector('[data-drawer-panel]');
      const closeButtons = drawer.querySelectorAll('[data-drawer-close]');

      closeButtons.forEach((button) => {
        button.addEventListener('click', () => closeDrawer(drawer));
      });

      if (backdrop instanceof HTMLElement) {
        backdrop.addEventListener('click', () => closeDrawer(drawer));
      }

      drawer.addEventListener('keydown', (event) => {
        if (event.key === 'Escape') {
          event.preventDefault();
          closeDrawer(drawer);
        } else if (event.key === 'Tab' && panel instanceof HTMLElement) {
          const focusable = getFocusableChildren(panel);
          if (!focusable.length) return;
          const first = focusable[0];
          const last = focusable[focusable.length - 1];
          if (event.shiftKey && document.activeElement === first) {
            event.preventDefault();
            last.focus({ preventScroll: true });
          } else if (!event.shiftKey && document.activeElement === last) {
            event.preventDefault();
            first.focus({ preventScroll: true });
          }
        }
      });
    });

    const openDrawer = (drawer) => {
      if (!drawer) return;
      const backdrop = drawer.querySelector('[data-drawer-backdrop]');
      const panel = drawer.querySelector('[data-drawer-panel]');
      if (!(panel instanceof HTMLElement)) return;
      lastFocusMap.set(
        drawer,
        document.activeElement instanceof HTMLElement
          ? document.activeElement
          : null
      );
      drawer.classList.remove('invisible');
      requestAnimationFrame(() => {
        if (backdrop instanceof HTMLElement) {
          backdrop.classList.remove('opacity-0');
          backdrop.classList.add('opacity-100');
        }
        panel.classList.remove('-translate-x-full', 'translate-x-full');
        panel.classList.add('translate-x-0');
      });
      drawer.setAttribute('aria-hidden', 'false');
      document.body.style.setProperty('overflow', 'hidden');
      const focusable = getFocusableChildren(panel);
      (focusable[0] || panel).focus({ preventScroll: true });
    };

    document.addEventListener('click', (event) => {
      const trigger =
        event.target instanceof HTMLElement
          ? event.target.closest('[data-drawer-trigger]')
          : null;
      if (!trigger) return;
      const targetId = trigger.getAttribute('data-drawer-trigger');
      if (!targetId) return;
      const drawer = document.getElementById(targetId);
      if (!(drawer instanceof HTMLElement)) return;
      openDrawer(drawer);
    });
  })();
</script>
