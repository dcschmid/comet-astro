---
interface Props {
  name: string;
  label?: string;
  checked?: boolean;
  disabled?: boolean;
  size?: 'sm' | 'md' | 'lg';
  className?: string;
  id?: string;
}

const {
  name,
  label,
  checked = false,
  disabled = false,
  size = 'md',
  className = '',
  id = name,
} = Astro.props;

const sizeClasses = {
  sm: { track: 'w-8 h-4', thumb: 'w-3 h-3', translate: 'translate-x-4' },
  md: { track: 'w-11 h-6', thumb: 'w-5 h-5', translate: 'translate-x-5' },
  lg: { track: 'w-14 h-7', thumb: 'w-6 h-6', translate: 'translate-x-7' },
};

const disabledClass = disabled
  ? 'opacity-50 cursor-not-allowed'
  : 'cursor-pointer';
---

<div
  class={`flex items-center gap-3 text-slate-900 dark:text-slate-100 ${className}`.trim()}
>
  <label
    for={id}
    class={`relative inline-block ${sizeClasses[size].track} ${disabledClass}`}
  >
    <input
      type="checkbox"
      id={id}
      name={name}
      checked={checked}
      disabled={disabled}
      class="sr-only peer"
    />
    <span
      class={`absolute inset-0 rounded-full border border-slate-300 bg-slate-300 transition peer-focus-visible:outline-none peer-focus-visible:ring-2 peer-focus-visible:ring-blue-600 peer-focus-visible:ring-offset-2 peer-focus-visible:ring-offset-white peer-checked:border-blue-600 peer-checked:bg-blue-600 dark:border-slate-600 dark:bg-slate-700 dark:peer-checked:border-blue-500 dark:peer-checked:bg-blue-500 dark:peer-focus-visible:ring-offset-slate-900`}
    ></span>
    <span
      class={`absolute top-0.5 left-0.5 ${sizeClasses[size].thumb} rounded-full bg-white shadow transition-transform peer-checked:${sizeClasses[size].translate} dark:bg-slate-900`}
    ></span>
  </label>
  {
    label && (
      <span
        class={`text-sm font-medium text-slate-800 dark:text-slate-200 ${disabled ? 'opacity-60' : ''}`}
      >
        {label}
      </span>
    )
  }
</div>
