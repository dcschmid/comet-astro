---
/**
 * Alert - status message
 */
interface Props {
  title?: string;
  message?: string;
  variant?: 'info' | 'success' | 'warning' | 'error';
  dismissible?: boolean;
  dismissLabel?: string;
  className?: string;
}

const {
  title,
  message,
  variant = 'info',
  dismissible = false,
  dismissLabel = 'Dismiss alert',
  className = '',
} = Astro.props as Props;

const baseWrap =
  'relative flex items-start gap-4 rounded-xl border px-4 py-4 text-base leading-relaxed shadow-sm transition-colors focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-offset-white focus-within:ring-current dark:focus-within:ring-offset-slate-950 motion-reduce:transition-none sm:px-5 sm:py-5';

const styles: Record<
  NonNullable<Props['variant']>,
  {
    wrap: string;
    icon: string;
    role: 'status' | 'alert';
    ariaLive: 'polite' | 'assertive';
    label: string;
  }
> = {
  info: {
    wrap: 'border-blue-500/70 bg-slate-50 text-slate-900 dark:border-blue-400/70 dark:bg-slate-900 dark:text-slate-100',
    icon: 'text-blue-700 dark:text-blue-300',
    role: 'status',
    ariaLive: 'polite',
    label: 'Information',
  },
  success: {
    wrap: 'border-emerald-500/70 bg-emerald-50 text-slate-900 dark:border-emerald-400/70 dark:bg-slate-900 dark:text-slate-100',
    icon: 'text-emerald-700 dark:text-emerald-300',
    role: 'status',
    ariaLive: 'polite',
    label: 'Success',
  },
  warning: {
    wrap: 'border-amber-500/80 bg-amber-50 text-slate-900 dark:border-amber-400/70 dark:bg-slate-900 dark:text-slate-100',
    icon: 'text-amber-700 dark:text-amber-300',
    role: 'alert',
    ariaLive: 'assertive',
    label: 'Warning',
  },
  error: {
    wrap: 'border-rose-500/80 bg-rose-50 text-slate-900 dark:border-rose-500/80 dark:bg-slate-900 dark:text-slate-100',
    icon: 'text-rose-700 dark:text-rose-300',
    role: 'alert',
    ariaLive: 'assertive',
    label: 'Error',
  },
};
---

<div
  class={`${baseWrap} ${styles[variant].wrap} ${className}`.trim()}
  role={styles[variant].role}
  aria-live={styles[variant].ariaLive}
  aria-atomic="true"
  data-variant={variant}
  data-state="open"
  aria-hidden="false"
>
  <div class="flex w-full items-start gap-4 sm:gap-5">
    <div
      class={`mt-1 flex h-9 w-9 shrink-0 items-center justify-center rounded-full bg-white/80 text-lg font-semibold shadow-inner ${styles[variant].icon} dark:bg-white/10`}
      aria-hidden="true"
    >
      {
        {
          info: 'ℹ︎',
          success: '✓',
          warning: '!',
          error: '×',
        }[variant]
      }
    </div>
    <div class="min-w-0 space-y-2 text-slate-800 dark:text-slate-200">
      <span class="sr-only">{styles[variant].label}</span>
      {title && <div class="text-base font-semibold text-current">{title}</div>}
      {
        message && (
          <div class="text-sm leading-relaxed text-current">{message}</div>
        )
      }
      <slot />
    </div>
    {
      dismissible && (
        <button
          type="button"
          class="absolute right-3 top-3 inline-flex h-9 w-9 items-center justify-center rounded-md border border-transparent text-sm font-semibold text-current transition-colors hover:border-current hover:bg-current/10 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-current focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:focus-visible:ring-offset-slate-950 motion-reduce:transition-none"
          data-close
          aria-label={dismissLabel}
        >
          <span aria-hidden="true">×</span>
          <span class="sr-only">{dismissLabel}</span>
        </button>
      )
    }
  </div>
</div>

<script is:inline>
  (() => {
    const script = document.currentScript;
    if (!(script instanceof HTMLScriptElement)) return;
    const root = script.previousElementSibling;
    if (!(root instanceof HTMLElement)) return;
    const btn = root.querySelector('[data-close]');
    if (!(btn instanceof HTMLElement)) return;
    root.dataset.state =
      root.getAttribute('hidden') === 'true' ? 'closed' : 'open';
    btn.addEventListener(
      'click',
      () => {
        root.setAttribute('hidden', 'true');
        root.setAttribute('aria-hidden', 'true');
        root.dataset.state = 'closed';
      },
      { passive: true }
    );
  })();
</script>
