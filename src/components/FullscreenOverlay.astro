---
/**
 * FullscreenOverlay - generic overlay for messages or confirmations
 */
interface Props {
  open?: boolean;
  title?: string;
  closable?: boolean;
  closeLabel?: string;
  className?: string;
}

const {
  open = false,
  title,
  closable = true,
  closeLabel = 'Close',
  className = '',
} = Astro.props as Props;
---

<div
  id="comet-fullscreen-overlay"
  class={`fixed inset-0 z-50 ${open ? '' : 'hidden'}`}
  role="dialog"
  aria-modal="true"
  aria-labelledby={title ? 'comet-overlay-title' : undefined}
>
  <div
    class="absolute inset-0 bg-slate-950/60 backdrop-blur-sm"
    data-overlay-backdrop
  >
  </div>
  <div
    class={`relative mx-auto my-12 w-[min(96vw,720px)] rounded-3xl border border-slate-200 bg-white p-6 text-slate-800 shadow-2xl dark:border-slate-700 dark:bg-slate-900 dark:text-slate-100 ${className}`.trim()}
  >
    <header class="mb-4 flex items-center justify-between gap-4">
      {
        title && (
          <h2
            id="comet-overlay-title"
            class="text-xl font-semibold text-slate-900 dark:text-slate-100"
          >
            {title}
          </h2>
        )
      }
      {
        closable && (
          <button
            type="button"
            class="inline-flex items-center justify-center rounded-xl border border-transparent bg-slate-100 px-3 py-2 text-sm font-semibold text-slate-700 transition hover:bg-slate-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:bg-slate-800 dark:text-slate-200 dark:hover:bg-slate-700 dark:focus-visible:ring-offset-slate-900"
            data-overlay-close
          >
            {closeLabel}
          </button>
        )
      }
    </header>
    <div
      class="max-h-[65vh] overflow-auto text-sm leading-relaxed text-slate-700 dark:text-slate-200"
    >
      <slot />
    </div>
    <div class="mt-4 flex flex-wrap gap-3">
      <slot name="actions" />
    </div>
  </div>
</div>

<script is:inline>
  (function () {
    const root = document.getElementById('comet-fullscreen-overlay');
    if (!(root instanceof HTMLElement)) return;
    const backdrop = root.querySelector('[data-overlay-backdrop]');
    const closeBtn = root.querySelector('[data-overlay-close]');
    const panel = root.querySelector('[role="dialog"]') || root;
    let lastFocused = null;

    const getFocusable = () => {
      return Array.from(
        root.querySelectorAll(
          'a[href], button:not([disabled]), textarea, input, select, [tabindex]'
        )
      ).filter((el) => el instanceof HTMLElement && el.tabIndex !== -1);
    };

    const open = () => {
      if (!root.classList.contains('hidden')) return;
      lastFocused =
        document.activeElement instanceof HTMLElement
          ? document.activeElement
          : null;
      root.classList.remove('hidden');
      document.body.style.setProperty('overflow', 'hidden');
      const focusable = getFocusable();
      (focusable[0] || panel)?.focus({ preventScroll: true });
    };

    const close = () => {
      if (root.classList.contains('hidden')) return;
      root.classList.add('hidden');
      document.body.style.removeProperty('overflow');
      if (lastFocused) {
        lastFocused.focus({ preventScroll: true });
      }
    };

    closeBtn?.addEventListener('click', close);
    backdrop?.addEventListener('click', close);
    window.addEventListener('keydown', (event) => {
      if (event.key === 'Escape') {
        close();
      } else if (event.key === 'Tab') {
        const focusable = getFocusable();
        if (!focusable.length) return;
        const first = focusable[0];
        const last = focusable[focusable.length - 1];
        if (event.shiftKey && document.activeElement === first) {
          event.preventDefault();
          last.focus({ preventScroll: true });
        } else if (!event.shiftKey && document.activeElement === last) {
          event.preventDefault();
          first.focus({ preventScroll: true });
        }
      }
    });

    window.CometOverlay = { open, close };
  })();
</script>
