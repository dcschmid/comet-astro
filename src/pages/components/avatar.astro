---
import DocsLayout from '../../layouts/DocsLayout.astro';
import Avatar from '../../components/Avatar.astro';

const teamMembers = [
  {
    name: 'Aria Daniels',
    src: 'https://images.unsplash.com/photo-1521572267360-ee0c2909d518?auto=format&fit=crop&w=240&q=80',
    status: 'online',
  },
  {
    name: 'Kai Nakamura',
    src: 'https://images.unsplash.com/photo-1504593811423-6dd665756598?auto=format&fit=crop&w=240&q=80',
    status: 'away',
  },
  {
    name: 'Noah Ibrahim',
    src: 'https://images.unsplash.com/photo-1531891437562-4301cf35b7e4?auto=format&fit=crop&w=240&q=80',
    status: 'busy',
  },
  {
    name: 'Ivy Chen',
    src: 'https://images.unsplash.com/photo-1524504388940-b1c1722653e1?auto=format&fit=crop&w=240&q=80',
    status: 'offline',
  },
];

const initialsSet = ['Addison Shaw', 'Devon Miles', 'Mira Patel', 'Jordan Fox'];

const usageSnippet = `---
import { Avatar } from 'comet-astro';

const user = {
  name: 'Ana Silva',
  src: 'https://example.com/avatars/ana.jpg',
};

---

<Avatar
  src={user.src}
  name={user.name}
  status="online"
  size="lg"
/>`;
---

<DocsLayout
  title="Avatar"
  description="Accessible avatar component with image, initials fallback, focus-safe status indicators, and responsive sizing."
>
  <section class="space-y-4">
    <p class="text-base text-slate-100">
      The avatar component displays people, teams, or entities with automatic initials fallback, high
      contrast surfaces, and screen-reader-friendly status descriptions. Every variant maintains 44&nbsp;px
      minimum touch targets and AAA color contrast in both light and dark themes.
    </p>
    <p class="text-base text-slate-200">
      Use it anywhere you need a recognisable identity treatment: navigation bars, lists, profile cards, or
      comment threads. Pair it with presence indicators, group stacks, or tooltips for richer experiences.
    </p>
  </section>

  <section class="mt-10 space-y-6">
    <h2 class="text-xl font-semibold text-slate-100">Props</h2>
    <dl class="grid gap-6 sm:grid-cols-2">
      <div class="space-y-1 rounded-lg border border-slate-700/75 bg-slate-900/60 p-4 shadow-sm">
        <dt class="text-sm font-semibold uppercase tracking-wide text-slate-200">src?</dt>
        <dd class="text-sm text-slate-200">
          Image URL. When omitted, the component renders initials inside an accessible fallback surface.
        </dd>
      </div>
      <div class="space-y-1 rounded-lg border border-slate-700/75 bg-slate-900/60 p-4 shadow-sm">
        <dt class="text-sm font-semibold uppercase tracking-wide text-slate-200">alt?</dt>
        <dd class="text-sm text-slate-200">
          Custom alt text for the image. Defaults to the <code>name</code> or a generic “Avatar” label.
        </dd>
      </div>
      <div class="space-y-1 rounded-lg border border-slate-700/75 bg-slate-900/60 p-4 shadow-sm">
        <dt class="text-sm font-semibold uppercase tracking-wide text-slate-200">name?</dt>
        <dd class="text-sm text-slate-200">
          Person or entity name used for initials, title attribute, and accessible labelling.
        </dd>
      </div>
      <div class="space-y-1 rounded-lg border border-slate-700/75 bg-slate-900/60 p-4 shadow-sm">
        <dt class="text-sm font-semibold uppercase tracking-wide text-slate-200">size?</dt>
        <dd class="text-sm text-slate-200">
          One of <code>xs</code>, <code>sm</code>, <code>md</code>, <code>lg</code>, <code>xl</code>, or
          <code>2xl</code>. Controls both the container dimensions and typography scale. Defaults to
          <code>"md"</code>.
        </dd>
      </div>
      <div class="space-y-1 rounded-lg border border-slate-700/75 bg-slate-900/60 p-4 shadow-sm">
        <dt class="text-sm font-semibold uppercase tracking-wide text-slate-200">variant?</dt>
        <dd class="text-sm text-slate-200">
          Shape style: <code>"circle"</code>, <code>"rounded"</code>, or <code>"square"</code>. Rounded
          variants use large radii to honour accessibility tap targets.
        </dd>
      </div>
      <div class="space-y-1 rounded-lg border border-slate-700/75 bg-slate-900/60 p-4 shadow-sm">
        <dt class="text-sm font-semibold uppercase tracking-wide text-slate-200">status?</dt>
        <dd class="text-sm text-slate-200">
          Optional presence indicator (<code>"online"</code>, <code>"away"</code>, <code>"busy"</code>,
          <code>"offline"</code>). Adds a labelled dot with high-contrast border and screen-reader text.
        </dd>
      </div>
      <div class="space-y-1 rounded-lg border border-slate-700/75 bg-slate-900/60 p-4 shadow-sm">
        <dt class="text-sm font-semibold uppercase tracking-wide text-slate-200">className?</dt>
        <dd class="text-sm text-slate-200">
          Extra Tailwind utilities merged onto the wrapper, ideal for margins, stacking, or animations.
        </dd>
      </div>
    </dl>
  </section>

  <section class="mt-10 space-y-6">
    <h2 class="text-xl font-semibold text-slate-100">Usage</h2>
    <p class="text-base text-slate-200">
      Provide the image source and name to get a polished avatar with fallback initials. Presence badges
      include off-screen text so screen readers announce the current status.
    </p>
    <pre class="overflow-x-auto rounded-lg border border-slate-700/70 bg-slate-950/80 p-4 text-sm text-slate-50 shadow-inner">
      <code class="language-astro">{usageSnippet}</code>
    </pre>
  </section>

  <section class="mt-10 space-y-8">
    <h2 class="text-xl font-semibold text-slate-100">Examples</h2>

    <article class="space-y-4">
      <div>
        <h3 class="text-lg font-semibold text-slate-100">Team roster</h3>
        <p class="text-base text-slate-200">
          Avatars with images and labelled status indicators. Hover or focus to see the accessible title,
          while screen readers detect the “Status” announcement automatically.
        </p>
      </div>
      <div class="flex flex-wrap gap-6">
        {
          teamMembers.map((member) => (
            <div class="flex flex-col items-center gap-3">
              <Avatar
                src={member.src}
                name={member.name}
                status={member.status as 'online' | 'offline' | 'busy' | 'away'}
                size="lg"
              />
              <p class="text-sm font-medium text-slate-200 dark:text-slate-300">
                {member.name}
              </p>
            </div>
          ))
        }
      </div>
    </article>

    <article class="space-y-4">
      <div>
        <h3 class="text-lg font-semibold text-slate-100">Initials fallback</h3>
        <p class="text-base text-slate-200">
          When no image is provided, the component renders uppercase initials on a high-contrast backdrop,
          ensuring the label remains legible at small sizes.
        </p>
      </div>
      <div class="flex flex-wrap gap-4">
        {
          initialsSet.map((person) => (
            <Avatar key={person} name={person} size="md" />
          ))
        }
      </div>
    </article>

    <article class="space-y-4">
      <div>
        <h3 class="text-lg font-semibold text-slate-100">Shapes &amp; sizes</h3>
        <p class="text-base text-slate-200">
          Mix geometric variants and responsive sizes to match different UI contexts—navigation bars, cards,
          or hero sections.
        </p>
      </div>
      <div class="flex flex-wrap items-center gap-4">
        <Avatar name="Circle Avatar" variant="circle" size="sm" />
        <Avatar name="Rounded Avatar" variant="rounded" size="md" />
        <Avatar name="Square Avatar" variant="square" size="lg" />
        <Avatar name="Hero Avatar" variant="circle" size="2xl" />
      </div>
    </article>
  </section>
</DocsLayout>
